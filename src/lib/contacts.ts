import axios from 'axios';

interface ContactInfo {
  nom: string;
  prenom: string;
  poste: string;
  email?: string;
  phone?: string;
  linkedin_url?: string;
  verified: boolean;
  accroche_personnalisee?: string;
  sources: string[];
  relevance_score?: number; // Nouveau: score de pertinence
  
  // Alternative field names for frontend compatibility
  accroche?: string;
  pitch?: string;
}

interface ContactSearchRequest {
  nomEntreprise: string;
  posteRecherche?: string;
  secteurActivite?: string;
  includeEmails?: boolean;
  includeLinkedIn?: boolean;
  contactRoles?: string[];
  siteWebEntreprise?: string;
  location?: string;
  nombreResultats?: number;
}

interface ContactSearchResult {
  contacts: ContactInfo[];
  sources: string[];
  success: boolean;
  error?: string;
}

export class ContactSearchClient {
  private apiKey: string;
  private baseUrl = 'https://api.openai.com/v1';

  // üéØ MAPPING INTELLIGENT DES R√îLES CGR (√âTENDU ET CORRIG√â)
  private readonly roleMapping: Record<string, string[]> = {
    // R√¥les achat/procurement - √âTENDU
    "responsable achat": ["procurement manager", "purchasing manager", "sourcing manager", "head of procurement", "acheteur senior", "responsable approvisionnement", "chief procurement officer", "cpo", "procurement director"],
    "acheteur": ["buyer", "purchasing specialist", "procurement specialist", "sourcing specialist", "acheteur industriel", "senior buyer", "lead buyer", "strategic buyer", "category buyer"],
    "acheteur projet": ["project buyer", "project procurement", "acheteur programme", "sourcing projet", "lead buyer"],
    "directeur achat": ["procurement director", "chief procurement officer", "CPO", "head of purchasing", "head of procurement"],
    "acheteur commodit√©": ["commodity buyer", "category buyer", "acheteur famille", "sourcing commodit√©", "strategic buyer"],
    
    // R√¥les techniques
    "directeur technique": ["technical director", "CTO", "chief technical officer", "R&D director", "innovation director", "directeur R&D", "responsable technique"],
    "responsable r&d": ["R&D manager", "research manager", "development manager", "innovation manager", "chef de projet R&D"],
    "ing√©nieur produit": ["product engineer", "design engineer", "mechanical engineer", "ing√©nieur conception", "ing√©nieur d√©veloppement"],
    
    // R√¥les production
    "directeur production": ["production director", "manufacturing director", "plant manager", "operations director", "directeur industriel"],
    "responsable production": ["production manager", "manufacturing manager", "operations manager", "chef de production"],
    "responsable qualit√©": ["quality manager", "QA manager", "QHSE manager", "responsable QSE"],
    
    // M√©taux sp√©cifiques
    "responsable achat m√©tal": ["metal buyer", "steel buyer", "raw material buyer", "acheteur mati√®res premi√®res", "acheteur m√©tallurgie"],
    "responsable d√©coupe": ["cutting manager", "machining manager", "responsable usinage", "chef atelier d√©coupe"]
  };

  // üéØ MOTS-CL√âS HAUTE PERTINENCE (nouveaux)
  private readonly highRelevanceKeywords = [
    // Achat/Procurement
    "buyer", "procurement", "sourcing", "purchasing", "acheteur", "achat", "approvisionnement",
    // Technique/Ing√©nierie  
    "engineer", "technical", "R&D", "innovation", "ing√©nieur", "technique", "d√©veloppement",
    // Production/Manufacturing
    "production", "manufacturing", "quality", "operations", "fabrication", "qualit√©",
    // Mat√©riaux/Composants
    "material", "component", "metal", "steel", "mat√©riau", "composant", "m√©tal"
  ];

  // üö´ R√îLES √Ä EXCLURE SYST√âMATIQUEMENT (affin√©s)
  private readonly excludedRoles = [
    // IT - mais pas "quality" qui peut contenir "IT"
    " IT ", "informatique", "syst√®me", "security", "s√©curit√©", "network", "r√©seau", "software", "digital",
    // Marketing/Commercial - mais attention aux faux positifs
    "marketing", "communication", "commercial", "vente", "sales", " PR ",
    // RH/Finance/Legal
    "RH", "human resources", "ressources humaines", "recrutement",
    "finance", "comptabilit√©", "accounting", "controller", "audit", "financial",
    "legal", "juridique", "compliance", " risk ", "risque"
  ];

  constructor() {
    this.apiKey = process.env.OPENAI_API_KEY!;
    if (!this.apiKey) {
      throw new Error('openai_api_key manquante');
    }
  }

  async searchContacts(request: ContactSearchRequest): Promise<ContactSearchResult> {
    console.log('üîç D√©but recherche contacts pour:', request.nomEntreprise);
    console.log('üë• R√¥les recherch√©s:', request.contactRoles);
    
    const prompt = this.buildContactSearchPrompt(request);
    console.log('üìù Prompt g√©n√©r√©:', prompt.substring(0, 300) + '...');
    
    try {
      const response = await axios.post(
        `${this.baseUrl}/chat/completions`,
        {
          model: 'gpt-4o-mini-search-preview-2025-03-11',
          messages: [
            { role: 'system', content: this.getSystemPrompt() },
            { role: 'user', content: prompt }
          ],
          max_tokens: 4000,
        },
        {
          headers: {
            'Authorization': `Bearer ${this.apiKey}`,
            'Content-Type': 'application/json'
          },
          timeout: 300000
        }
      );
      
      console.log('‚úÖ R√©ponse API re√ßue, status:', response.status);
      return this.parseContactResponse(response.data, request);
    } catch (error: any) {
      console.error('‚ùå Erreur API:', {
        status: error.response?.status,
        message: error.message,
        data: error.response?.data
      });
      
      return {
        contacts: [],
        sources: [],
        success: false,
        error: `Erreur API: ${error.response?.status || 'Timeout'} - ${error.message}`
      };
    }
  }

  private getSystemPrompt(): string {
    return `Tu es un expert en recherche de contacts B2B industriels sp√©cialis√© dans l'identification ULTRA-PR√âCISE de d√©cideurs techniques, achats et production. Tu dois r√©pondre UNIQUEMENT en JSON valide.

üéØ EXPERTISE CGR INTERNATIONAL (√† conna√Ætre absolument):
- Fabricant de ressorts sur mesure et composants m√©caniques
- Technologies: formage √† froid, surmoulage m√©tal, co-ing√©nierie  
- Secteurs: automobile, a√©ronautique, industrie g√©n√©rale
- 50 ans d'expertise, pr√©sence sur 4 continents

R√âPONSE OBLIGATOIRE - FORMAT JSON STRICT:
{
  "contacts": [
    {
      "nom": "Nom",
      "prenom": "Pr√©nom", 
      "poste": "Poste exact avec responsabilit√©s",
      "email": "email@entreprise.com",
      "phone": "+33...",
      "linkedin_url": "https://linkedin.com/in/...",
      "verified": true,
      "relevance_score": 0.95,
      "sources": ["url1", "url2"]
    }
  ],
  "sources": ["url1", "url2"]
}

üö® R√àGLES CRITIQUES DE FILTRAGE:
- PRIORIT√â ABSOLUE aux r√¥les ACHAT, TECHNIQUE, PRODUCTION uniquement
- EXCLURE SYST√âMATIQUEMENT: IT/Informatique, Marketing, RH, Finance, Legal, Commercial/Ventes
- Correspondance intelligente: "Head of Procurement" = "Responsable Achat"  
- Chercher dans organigrammes industriels, pages √©quipes techniques
- V√©rifier que le poste correspond r√©ellement aux besoins de composants m√©caniques
- Score de pertinence obligatoire (0.0 √† 1.0)

üéØ R√îLES CIBLES PRIORITAIRES:
- Achat/Sourcing: responsable achat, acheteur, procurement manager, sourcing, SENIOR BUYER, LEAD BUYER, STRATEGIC BUYER, CPO
- Technique: directeur technique, R&D, ing√©nieur produit, innovation, CTO
- Production: directeur production, responsable qualit√©, manufacturing
- Sp√©cialistes: achat m√©tal, d√©coupe, usinage, mati√®res premi√®res

‚ùå EXCLUSIONS ABSOLUES:
- Toute mention d'IT, Security, Network, Software, Digital
- Marketing, Sales, Commercial, Communication  
- RH, Finance, Legal, Audit, Risk
- Postes administratifs ou support

‚úÖ VALIDATION OBLIGATOIRE:
- Le poste doit avoir un lien direct avec l'industrie m√©canique
- Capacit√© de d√©cision sur composants/mati√®res premi√®res
- Pr√©sence dans l'organigramme industriel de l'entreprise`;
  }

  // üîç CORRESPONDANCE INTELLIGENTE DES R√îLES (CORRIG√âE)
  private async validateRoleRelevance(poste: string, targetRoles: string[]): Promise<{isRelevant: boolean, score: number, reason: string}> {
    const posteLower = poste.toLowerCase();
    console.log(`üîç Validation r√¥le: "${poste}" contre`, targetRoles);
    
    // üö´ Exclusion imm√©diate des r√¥les non pertinents (avec v√©rification stricte)
    for (const excluded of this.excludedRoles) {
      const excludedLower = excluded.toLowerCase().trim();
      if (excludedLower.startsWith(' ') && excludedLower.endsWith(' ')) {
        // Recherche de mots entiers pour √©viter les faux positifs
        if (posteLower.includes(excludedLower)) {
          console.log(`‚ùå Rejet√©: mot entier "${excludedLower}" trouv√©`);
          return {
            isRelevant: false, 
            score: 0.0, 
            reason: `R√¥le exclu: ${excluded.trim()} d√©tect√© dans "${poste}"`
          };
        }
      } else {
        // Recherche normale pour les autres exclusions
        if (posteLower.includes(excludedLower)) {
          console.log(`‚ùå Rejet√©: "${excludedLower}" trouv√©`);
          return {
            isRelevant: false, 
            score: 0.0, 
            reason: `R√¥le exclu: ${excluded} d√©tect√© dans "${poste}"`
          };
        }
      }
    }

    // üéØ √âVALUATION DE PERTINENCE MULTICRIT√àRES
    let maxScore = 0.0;
    let bestMatch = '';
    let matchDetails: string[] = [];

    // 1. CORRESPONDANCE DIRECTE AVEC MOTS-CL√âS HAUTE PERTINENCE
    for (const keyword of this.highRelevanceKeywords) {
      if (posteLower.includes(keyword.toLowerCase())) {
        const score = this.calculateKeywordScore(keyword, poste);
        if (score > maxScore) {
          maxScore = score;
          bestMatch = `Mot-cl√© haute pertinence: ${keyword}`;
        }
        matchDetails.push(`${keyword}(${score.toFixed(2)})`);
      }
    }

    // 2. CORRESPONDANCE VIA MAPPING INTELLIGENT
    for (const targetRole of targetRoles) {
      const targetLower = targetRole.toLowerCase();
      
      // Correspondance directe avec le r√¥le cible
      const roleWords = targetLower.replace('responsable ', '').replace('directeur ', '').split(' ');
      let directMatch = false;
      
      for (const word of roleWords) {
        if (word.length > 3 && posteLower.includes(word)) {
          const score = 0.9;
          if (score > maxScore) {
            maxScore = score;
            bestMatch = `Correspondance directe: ${targetRole} via "${word}"`;
          }
          directMatch = true;
        }
      }

      // Correspondance via synonymes
      const synonyms = this.roleMapping[targetLower] || [];
      for (const synonym of synonyms) {
        const synonymLower = synonym.toLowerCase();
        if (posteLower.includes(synonymLower)) {
          const score = this.calculateSynonymScore(synonym, targetRole);
          if (score > maxScore) {
            maxScore = score;
            bestMatch = `${targetRole} via synonyme "${synonym}"`;
          }
          matchDetails.push(`${synonym}(${score.toFixed(2)})`);
        }
      }
    }

    // 3. CORRESPONDANCE G√âN√âRIQUE POUR R√îLES INDUSTRIELS √âVIDENTS
    const industrialRoles = ['buyer', 'procurement', 'sourcing', 'technical', 'engineer', 'production', 'quality', 'manufacturing'];
    for (const role of industrialRoles) {
      if (posteLower.includes(role) && maxScore < 0.7) {
        maxScore = Math.max(maxScore, 0.75);
        bestMatch = `R√¥le industriel g√©n√©rique: ${role}`;
      }
    }

    const isRelevant = maxScore >= 0.7;
    const reason = isRelevant ? 
      `‚úÖ ${bestMatch} (d√©tails: ${matchDetails.join(', ')})` : 
      `‚ùå Score insuffisant (${maxScore.toFixed(2)}) - Aucune correspondance pertinente`;

    console.log(`üéØ R√©sultat validation: ${poste} -> Pertinent: ${isRelevant}, Score: ${maxScore.toFixed(2)}, Raison: ${reason}`);

    return {
      isRelevant,
      score: maxScore,
      reason
    };
  }

  // üéØ CALCUL DE SCORE POUR MOTS-CL√âS
  private calculateKeywordScore(keyword: string, poste: string): number {
    const keywordLower = keyword.toLowerCase();
    const posteLower = poste.toLowerCase();
    
    // Scores diff√©renci√©s selon l'importance du mot-cl√©
    const highValueKeywords = ['procurement', 'buyer', 'sourcing', 'technical', 'engineer'];
    const mediumValueKeywords = ['purchasing', 'production', 'quality', 'manufacturing'];
    
    let baseScore = 0.75; // Score par d√©faut
    
    if (highValueKeywords.includes(keywordLower)) {
      baseScore = 0.9;
    } else if (mediumValueKeywords.includes(keywordLower)) {
      baseScore = 0.8;
    }
    
    // Bonus si le mot-cl√© est au d√©but du titre (plus important)
    if (posteLower.startsWith(keywordLower) || posteLower.startsWith('chief ' + keywordLower) || posteLower.startsWith('head of ' + keywordLower)) {
      baseScore += 0.05;
    }
    
    return Math.min(baseScore, 1.0);
  }

  // üéØ CALCUL DE SCORE POUR SYNONYMES
  private calculateSynonymScore(synonym: string, targetRole: string): number {
    const synonymLower = synonym.toLowerCase();
    
    // Scores diff√©renci√©s selon la qualit√© du synonyme
    const exactSynonyms = ['chief procurement officer', 'cpo', 'head of procurement', 'senior buyer', 'lead buyer'];
    const goodSynonyms = ['procurement manager', 'category buyer', 'strategic buyer', 'technical director'];
    
    let baseScore = 0.75; // Score par d√©faut
    
    if (exactSynonyms.includes(synonymLower)) {
      baseScore = 0.95;
    } else if (goodSynonyms.includes(synonymLower)) {
      baseScore = 0.85;
    }
    
    return baseScore;
  }

  private buildContactSearchPrompt(request: ContactSearchRequest): string {
    const { nomEntreprise, posteRecherche, secteurActivite, contactRoles, siteWebEntreprise } = request;
    
    // üéØ Construction des r√¥les avec mapping intelligent
    let rolesSection = '';
    let exclusionSection = '';
    
    if (contactRoles && contactRoles.length > 0) {
      rolesSection = `
üéØ R√îLES SP√âCIFIQUES RECHERCH√âS (MAPPING INTELLIGENT REQUIS):
${contactRoles.map(role => {
        const synonyms = this.roleMapping[role.toLowerCase()] || [];
        return `- ${role}\n  Synonymes accept√©s: ${synonyms.join(', ')}`;
      }).join('\n')}

üîç MOTS-CL√âS HAUTE PERTINENCE √Ä D√âTECTER:
${this.highRelevanceKeywords.join(', ')}`;

      exclusionSection = `
üö´ R√îLES √Ä EXCLURE ABSOLUMENT:
${this.excludedRoles.map(role => `- Tout poste contenant: "${role}"`).join('\n')}`;
    }

    return `Recherche contacts d√©cisionnaires ULTRA-CIBL√âS pour "${nomEntreprise}" - Secteur industriel/m√©canique uniquement.

üè¢ ENTREPRISE: ${nomEntreprise}
${secteurActivite ? `üè≠ SECTEUR: ${secteurActivite}` : ''}
${siteWebEntreprise ? `üåê SITE WEB: ${siteWebEntreprise}` : ''}

${rolesSection}

${exclusionSection}

üîç SOURCES √Ä CONSULTER PRIORITAIREMENT:
1. "${nomEntreprise} organigramme √©quipe production technique"
2. "${nomEntreprise} √©quipe achat procurement sourcing"  
3. "${nomEntreprise} directeur technique R&D innovation"
4. "${nomEntreprise} manufacturing team production quality"
5. Annuaires industriels sp√©cialis√©s (pas g√©n√©ralistes)

‚ö° INSTRUCTIONS ULTRA-CRITIQUES:
1. **FILTRAGE MOINS STRICT**: Accepter Senior Buyer, Lead Buyer, Strategic Buyer, CPO
2. **MAPPING INTELLIGENT**: "Head of Procurement" = "Responsable Achat", "Senior Buyer" = "Acheteur"
3. **CONTEXTE CGR**: Chercher des personnes qui ach√®tent/con√ßoivent des composants m√©caniques
4. **PERTINENCE**: Score obligatoire bas√© sur l'ad√©quation r√¥le/besoins CGR
5. **V√âRIFICATION**: Le contact peut-il d√©cider d'acheter des ressorts/composants m√©caniques ?

üéØ QUESTIONS DE VALIDATION pour chaque contact:
- Ce poste a-t-il un lien avec l'achat de composants m√©caniques ?
- Cette personne peut-elle d√©cider de travailler avec un fournisseur comme CGR ?
- Le r√¥le est-il dans la cha√Æne de d√©cision technique/achat/production ?

üìä CRIT√àRES DE SCORING (0.0 √† 1.0):
- 0.9-1.0: Correspondance parfaite (CPO, Senior Buyer, Lead Buyer)
- 0.7-0.8: Tr√®s pertinent (Directeur Technique, Category Buyer)  
- 0.5-0.6: Moyennement pertinent (Strategic Buyer, Ing√©nieur R&D)
- <0.5: Non pertinent (√† exclure)

üéØ OBJECTIF: ${request.nombreResultats || 5} contacts ULTRA-QUALIFI√âS uniquement.

R√âPONSE: JSON avec contacts filtr√©s et scores de pertinence obligatoires.`;
  }

  // üé® G√âN√âRATION D'ACCROCHES VRAIMENT PERSONNALIS√âES
  // üéØ G√âN√âRATION D'ACCROCHES FIABLES BAS√âES SUR CGR UNIQUEMENT
// üéØ G√âN√âRATION D'ACCROCHES OPTIMIS√âE AVEC LE PROMPT DU SENIOR
private async generateCustomAccroche(contact: ContactInfo, nomEntreprise: string, secteurActivite?: string): Promise<string> {
  
  // üè≠ EXPERTISE CGR COMPL√àTE - BAS√âE SUR LE SITE WEB OFFICIEL
  const cgrCompleteProducts = {
    ressorts: [
      "ressorts de traction",
      "ressorts de torsion", 
      "ressorts de compression",
      "ressorts spiraux",
      "ressorts plats",
      "micro-ressorts",
      "ressorts enroul√©s",
      "ressorts push/pull"
    ],
    piecesFormees: [
      "pi√®ces form√©es √† froid √† base de fil d'acier",
      "pi√®ces en acier inoxydable et alliages (inconel, argent)",
      "composants sp√©cialis√©s haute pr√©cision"
    ],
    composantsMecaniques: [
      "composants m√©caniques et m√©catroniques",
      "contacts estamp√©s",
      "connecteurs √† emmanchement press-fit (syst√®me brevet√© EloPIN)",
      "pi√®ces m√©talliques embouties",
      "sous-ensembles m√©talloplastiques"
    ],
    autresComposants: [
      "c√¢bles et bras d'essuyage automobile",
      "connecteurs industriels",
      "composants fabriqu√©s √† partir de fils, tubes, c√¢bles, feuillards"
    ],
    applications: [
      "dispositifs de s√©curit√© automobile",
      "moteurs et bo√Ætes de vitesse", 
      "si√®ges et syst√®mes d'essuyage",
      "freins et colonnes de direction",
      "batteries et moteurs √©lectriques",
      "√©quipements √©lectrotechniques (micro-interrupteurs, relais)",
      "dispositifs m√©dicaux"
    ]
  };

  // üéØ D√âTECTION INTELLIGENTE DU R√îLE POUR ADAPTER LE MESSAGE
  const posteAnalyze = contact.poste.toLowerCase();
  let roleType = "acheteur";
  let mainChallenge = "sourcer des composants fiables";
  let cgrStrength = "formage √† froid et ressorts sur mesure";

  // Mapping r√¥le -> challenge -> produit CGR le plus pertinent
  if (posteAnalyze.includes('achat') || posteAnalyze.includes('procurement') || posteAnalyze.includes('buyer') || posteAnalyze.includes('sourcing')) {
    roleType = "acheteur";
    mainChallenge = "sourcer des composants m√©caniques de qualit√©";
    cgrStrength = "ressorts sur mesure et pi√®ces form√©es √† froid";
  } else if (posteAnalyze.includes('technique') || posteAnalyze.includes('r&d') || posteAnalyze.includes('engineer') || posteAnalyze.includes('innovation')) {
    roleType = "responsable technique";
    mainChallenge = "d√©velopper des solutions m√©caniques innovantes";
    cgrStrength = "composants m√©catroniques et syst√®me press-fit brevet√© EloPIN";
  } else if (posteAnalyze.includes('production') || posteAnalyze.includes('manufacturing') || posteAnalyze.includes('quality')) {
    roleType = "responsable production";
    mainChallenge = "optimiser vos process de fabrication";
    cgrStrength = "sous-ensembles m√©talloplastiques et pi√®ces embouties";
  } else if (posteAnalyze.includes('directeur') || posteAnalyze.includes('chief') || posteAnalyze.includes('head')) {
    roleType = "d√©cideur";
    mainChallenge = "d√©velopper des partenariats techniques strat√©giques";
    cgrStrength = "solutions compl√®tes du ressort au sous-ensemble m√©catronique";
  }

  const prompt = `Met-toi √† la place d'un commercial de chez CGR International,
sachant que CGR International fabrique les produits suivants :

* **Ressorts sur mesure :** ressorts de traction, ressorts de torsion, ressorts de compression, ressorts spiraux, ressorts plats, micro-ressorts, ressorts enroul√©s, ressorts push/pull.

* **Pi√®ces form√©es √† froid** √† base de fil d'acier, acier inoxydable et alliages (dont inconel, argent pour applications sp√©cifiques).

* **Composants m√©caniques et m√©catroniques**, tels que des contacts estamp√©s, connecteurs √† emmanchement selon le syst√®me press-fit brevet√© EloPIN, pi√®ces m√©talliques embouties, sous-ensembles m√©talloplastiques.

* **C√¢bles, bras d'essuyage automobile**, connecteurs, ainsi que divers composants fabriqu√©s √† partir de fils, tubes, c√¢bles, feuillards en acier ou alliages.

* **Produits destin√©s √† des applications vari√©es** : dispositifs de s√©curit√© automobile, moteurs, bo√Ætes de vitesse, si√®ges, syst√®mes d'essuyage, freins, colonnes de direction, batteries et moteurs √©lectriques, √©quipements √©lectrotechniques (micro-interrupteurs, interrupteurs-sectionneurs, relais thermiques, protecteurs de surtension), dispositifs m√©dicaux.

üéØ **PROFIL DU CONTACT :**
- **Nom :** ${contact.prenom} ${contact.nom}
- **Poste :** ${contact.poste}
- **Entreprise :** ${nomEntreprise}
- **Type de r√¥le d√©tect√© :** ${roleType}
- **Challenge principal :** ${mainChallenge}

üí° **CONTEXTE SP√âCIFIQUE :**
Site web CGR : https://www.cgr-international.com/fr/
En tant que commercial CGR expert, tu t'adresses √† un ${roleType} qui doit ${mainChallenge}.

üéØ **MISSION :**
Peux-tu pr√©parer une accroche commerciale PARFAITE et ENGAGEANTE pour cet ${roleType}, en mettant en √©vidence notre expertise "${cgrStrength}" qui r√©sout directement ses enjeux ?

‚úÖ **STRUCTURE OPTIMALE (3 phrases fluides, 250-280 caract√®res) :**
1. **Ouverture personnalis√©e impactante** : "Bonjour ${contact.prenom}, en tant que ${contact.poste} chez ${nomEntreprise}..."
2. **Value proposition CGR claire** : Lien direct entre notre expertise et ses besoins sp√©cifiques
3. **Call-to-action engageant** : Question ouverte qui donne envie de r√©pondre

üöÄ **EXEMPLES D'ACCROCHES PARFAITES :**
- "Bonjour ${contact.prenom}, en tant que ${contact.poste} chez ${nomEntreprise}, vous cherchez des composants fiables ? Chez CGR, nous ma√Ætrisons les ressorts sur mesure et pi√®ces form√©es √† froid, parfaits pour vos projets. Quels sont vos d√©fis actuels ?"

- "${contact.prenom}, votre expertise en ${roleType} vous am√®ne s√ªrement √† rechercher des solutions techniques innovantes ? CGR propose des composants m√©catroniques et notre syst√®me press-fit brevet√© EloPIN. Curieux d'en savoir plus ?"

‚ö° **R√àGLES D'EXCELLENCE :**
- Ton naturel et professionnel (pas robotique)
- √âviter les phrases g√©n√©riques type "j'esp√®re que vous allez bien"
- Cr√©er une connexion imm√©diate entre CGR et ses besoins
- Finir par une question qui appelle une r√©ponse concr√®te
- Utiliser les vrais noms de produits/technologies CGR
- Maximum 280 caract√®res pour un message LinkedIn parfait

**OBJECTIF :** Cr√©er une accroche si engageante que le prospect a envie de r√©pondre imm√©diatement.

**R√âPONSE :** Une seule accroche commerciale parfaite et pr√™te √† envoyer.`;

  try {
    const response = await axios.post(
      `${this.baseUrl}/chat/completions`,
      {
        model: 'gpt-4o-mini',
        messages: [
          {
            role: 'system',
            content: `Tu es un commercial expert de CGR International avec une parfaite ma√Ætrise de l'art de la prospection B2B.

**TON EXPERTISE CGR :**
- 50+ ans d'exp√©rience en ressorts et formage √† froid
- Gamme compl√®te : du micro-ressort aux sous-ensembles m√©catroniques
- Technologies brevet√©es : syst√®me press-fit EloPIN
- Applications : automobile, √©lectrotechnique, m√©dical, industrie g√©n√©rale

**TON STYLE DE VENTE GAGNANT :**
- Accroches personnalis√©es qui cr√©ent une connexion imm√©diate
- Focus sur la valeur concr√®te pour le prospect
- Questions engageantes qui appellent une r√©ponse
- Ton naturel et professionnel (jamais robotique)

**TES R√àGLES D'OR POUR UNE ACCROCHE PARFAITE :**
- Commencer par "Bonjour [Pr√©nom]" pour cr√©er la proximit√©
- Faire le lien direct entre son poste et nos solutions CGR
- Mentionner UNE technologie/produit CGR sp√©cifique et pertinent
- Finir par une question ouverte sur ses projets/d√©fis actuels
- Maximum 280 caract√®res pour LinkedIn
- √âviter les phrases bateau type "j'esp√®re que √ßa va"

**OBJECTIF :** 
Chaque accroche doit √™tre si engageante que le prospect a envie de r√©pondre imm√©diatement pour en savoir plus sur CGR.

**TU G√âN√àRES :** Une seule accroche parfaite, pr√™te √† envoyer.`
          },
          { role: 'user', content: prompt }
        ],
        max_tokens: 150,
        temperature: 0.4 // √âquilibre cr√©ativit√©/fiabilit√©
      },
      {
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
          'Content-Type': 'application/json'
        },
        timeout: 30000
      }
    );

    let accroche = response.data.choices[0]?.message?.content?.trim() || '';
    
    // üîß VALIDATION ET NETTOYAGE DE S√âCURIT√â
    if (accroche.length > 300) {
      // Couper proprement si trop long
      accroche = accroche.substring(0, 280).trim();
      if (!accroche.endsWith('.') && !accroche.endsWith('?') && !accroche.endsWith('!')) {
        accroche += '...';
      }
    }

    // üõ°Ô∏è VALIDATION ANTI-HALLUCINATION
    const forbiddenTerms = [
      // Faux produits/services CGR
      'consulting', 'formation', 'audit', 'maintenance',
      // Secteurs non confirm√©s
      'pharmaceutique', 'cosm√©tique', 'alimentaire', 'textile',
      // Fausses certifications
      'iso 45001', 'reach compliant'
    ];
    
    const accrocheLC = accroche.toLowerCase();
    const containsForbidden = forbiddenTerms.some(term => accrocheLC.includes(term));
    
    if (containsForbidden) {
      // üîß FALLBACK s√ªr avec template √©prouv√©
      accroche = `Bonjour ${contact.prenom}, en tant que ${contact.poste} chez ${nomEntreprise}, vous devez ${mainChallenge}. CGR ma√Ætrise ${cgrStrength} depuis 50+ ans. Parlons de vos projets actuels ?`;
    }

    console.log('‚úÖ Accroche CGR optimis√©e g√©n√©r√©e:', accroche);
    return accroche;
      
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©ration accroche optimis√©e:', error);
    
    // üîß FALLBACK DE S√âCURIT√â avec le meilleur template
    return this.generatePremiumFallbackAccroche(contact, nomEntreprise, roleType, mainChallenge, cgrStrength);
  }
}

// üèÜ FALLBACK PREMIUM AVEC TEMPLATES √âPROUV√âS
private generatePremiumFallbackAccroche(
  contact: ContactInfo, 
  nomEntreprise: string,
  roleType: string,
  mainChallenge: string, 
  cgrStrength: string
): string {
  
  const premiumTemplates = [
    `Bonjour ${contact.prenom}, en tant que ${contact.poste} chez ${nomEntreprise}, vous devez ${mainChallenge}. CGR ma√Ætrise ${cgrStrength} depuis 50+ ans. Quels sont vos d√©fis actuels sur ces composants ?`,
    
    `${contact.prenom}, votre poste de ${contact.poste} vous am√®ne √† travailler sur des composants m√©caniques ? CGR excelle en ${cgrStrength}. Curieux de d√©couvrir nos capacit√©s techniques ?`,
    
    `En tant que ${roleType}, vous recherchez des solutions fiables pour vos pi√®ces techniques ? CGR, sp√©cialiste ${cgrStrength}, accompagne ${nomEntreprise}. √âchangeons 15min ?`,
    
    `${contact.prenom}, CGR accompagne les ${roleType} comme vous avec notre expertise en ${cgrStrength}. Quels sont vos enjeux actuels chez ${nomEntreprise} ?`
  ];

  const selectedTemplate = premiumTemplates[Math.floor(Math.random() * premiumTemplates.length)];
  
  // V√©rification de longueur et ajustement si n√©cessaire
  if (selectedTemplate.length > 280) {
    return `${contact.prenom}, CGR ma√Ætrise ${cgrStrength} depuis 50+ ans. Parlons de vos projets chez ${nomEntreprise} ?`;
  }
  
  return selectedTemplate;
}

  private async parseContactResponse(response: any, request: ContactSearchRequest): Promise<ContactSearchResult> {
    try {
      const content = response.choices[0]?.message?.content || '';
      console.log('üîç R√©ponse brute API:', content.substring(0, 500));
      
      // Nettoyage du contenu pour extraire le JSON
      let cleanContent = content.trim();
      cleanContent = cleanContent.replace(/```json\s*/g, '').replace(/```\s*/g, '');
      
      const jsonMatch = cleanContent.match(/\{[\s\S]*"contacts"[\s\S]*\[[\s\S]*\][\s\S]*\}/);
      
      if (!jsonMatch) {
        console.log('‚ùå Aucun JSON trouv√©, contenu:', cleanContent);
        return {
          contacts: [],
          sources: [],
          success: false,
          error: 'Format JSON non trouv√© - contenu re√ßu: ' + cleanContent.substring(0, 200)
        };
      }

      let jsonString = jsonMatch[0];
      console.log('üìã JSON extrait:', jsonString);

      const parsed = JSON.parse(jsonString);
      
      if (!parsed || !Array.isArray(parsed.contacts)) {
        console.log('‚ùå Structure contacts invalide:', parsed);
        return {
          contacts: [],
          sources: [],
          success: false,
          error: 'Structure JSON invalide - contacts non trouv√©s'
        };
      }

      // üéØ FILTRAGE INTELLIGENT DES CONTACTS
      const qualifiedContacts: ContactInfo[] = [];

      for (const contact of parsed.contacts.filter((c: any) => c && typeof c === 'object')) {
        // Validation basique
        if (!contact.nom || !contact.prenom || !contact.poste) {
          console.log('‚ùå Contact rejet√© (donn√©es manquantes):', contact);
          continue;
        }

        // üîç VALIDATION DE PERTINENCE AVEC IA
        const relevanceCheck = await this.validateRoleRelevance(
          contact.poste, 
          request.contactRoles || []
        );

        if (!relevanceCheck.isRelevant) {
          console.log('‚ùå Contact rejet√© (non pertinent):', contact.poste, '-', relevanceCheck.reason);
          continue;
        }

        const qualifiedContact: ContactInfo = {
          nom: String(contact.nom || '').trim(),
          prenom: String(contact.prenom || '').trim(),
          poste: String(contact.poste || '').trim(),
          email: contact.email ? String(contact.email).trim() : undefined,
          phone: contact.phone ? this.cleanPhoneNumber(String(contact.phone)) : undefined,
          linkedin_url: contact.linkedin_url ? String(contact.linkedin_url).trim() : undefined,
          verified: Boolean(contact.verified),
          relevance_score: relevanceCheck.score,
          sources: Array.isArray(contact.sources) ? contact.sources.filter(this.isValidUrl) : []
        };

        // ‚ú® G√âN√âRATION D'ACCROCHE ULTRA-PERSONNALIS√âE
        try {
          console.log(`üéØ G√©n√©ration accroche ultra-personnalis√©e pour ${qualifiedContact.prenom} ${qualifiedContact.nom} (${qualifiedContact.poste})`);
          
          const customAccroche = await this.generateCustomAccroche(
            qualifiedContact, 
            request.nomEntreprise, 
            request.secteurActivite
          );

          qualifiedContact.accroche_personnalisee = customAccroche;
          qualifiedContact.accroche = customAccroche;
          qualifiedContact.pitch = customAccroche;

          console.log('‚úÖ Accroche g√©n√©r√©e (score:', relevanceCheck.score, '):', customAccroche.substring(0, 100) + '...');
        } catch (error) {
          console.error('‚ùå Erreur g√©n√©ration accroche:', error);
          qualifiedContact.accroche_personnalisee = `${qualifiedContact.prenom}, votre expertise en ${qualifiedContact.poste.toLowerCase()} chez ${request.nomEntreprise} m'int√©resse. CGR, sp√©cialiste ressorts 50 ans, aimerait √©changer 15min sur vos enjeux.`;
        }

        qualifiedContacts.push(qualifiedContact);
        console.log('‚úÖ Contact qualifi√© ajout√©:', qualifiedContact);
      }

      // üèÜ TRI PAR SCORE DE PERTINENCE
      qualifiedContacts.sort((a, b) => (b.relevance_score || 0) - (a.relevance_score || 0));

      console.log(`‚úÖ ${qualifiedContacts.length} contacts qualifi√©s avec accroches ultra-personnalis√©es`);

      const sources = Array.isArray(parsed.sources) ? parsed.sources.filter(this.isValidUrl) : [];
      
      return {
        contacts: qualifiedContacts,
        sources,
        success: true
      };
    } catch (error: any) {
      console.error('‚ùå Erreur parsing JSON:', error);
      return {
        contacts: [],
        sources: [],
        success: false,
        error: `Erreur parsing JSON: ${error.message}`
      };
    }
  }

  private isValidEmail(email: string): boolean {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email) && !email.includes('example.com');
  }

  private isValidLinkedInUrl(url: string): boolean {
    return url.includes('linkedin.com/in/') && this.isValidUrl(url);
  }

  private isValidUrl(url: string): boolean {
    try {
      new URL(url);
      return true;
    } catch {
      return false;
    }
  }

  private cleanPhoneNumber(phone: string): string {
    return phone.replace(/[^\d+\s\-\.]/g, '').trim();
  }
}