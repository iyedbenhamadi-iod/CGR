import axios from 'axios';

interface ContactInfo {
  nom: string;
  prenom: string;
  poste: string;
  email?: string;
  phone?: string;
  linkedin_url?: string;
  verified: boolean;
  accroche_personnalisee?: string;
  sources: string[];
  relevance_score?: number;
  accroche?: string;
  pitch?: string;
}

interface ContactSearchRequest {
  nomEntreprise: string;
  posteRecherche?: string;
  secteurActivite?: string;
  includeEmails?: boolean;
  includeLinkedIn?: boolean;
  contactRoles?: string[];
  siteWebEntreprise?: string;
  zoneGeographique?: string;
  nombreResultats?: number;
}

interface ContactSearchResult {
  contacts: ContactInfo[];
  sources: string[];
  success: boolean;
  error?: string;
  method?: 'apollo' | 'perplexity-fallback' | 'apollo+perplexity';
}

export class ContactSearchClient {
  private apolloApiKey: string;
  private perplexityApiKey: string;
  private apolloBaseUrl = 'https://api.apollo.io/api/v1';
  private perplexityBaseUrl = 'https://api.perplexity.ai';

  constructor() {
    this.apolloApiKey = process.env.APOLLO_API_KEY!;
    this.perplexityApiKey = process.env.PERPLEXITY_API_KEY!;
    
    if (!this.apolloApiKey) {
      throw new Error('APOLLO_API_KEY manquante dans les variables d\'environnement');
    }
    if (!this.perplexityApiKey) {
      throw new Error('PERPLEXITY_API_KEY manquante dans les variables d\'environnement');
    }
  }

  async searchContacts(request: ContactSearchRequest): Promise<ContactSearchResult> {
    console.log('üîç D√©but recherche contacts pour:', request.nomEntreprise);

    // 1Ô∏è‚É£ Recherche OBLIGATOIRE du contact standard via Perplexity avec retry renforc√©
    console.log('üìû [PRIORITAIRE] Recherche coordonn√©es standard avec Perplexity...');
    const perplexityResult = await this.searchCompanyStandardWithRetry(request, 3);

    // Validation stricte du contact standard
    const standardContact = this.validateStandardContact(perplexityResult.contacts[0]);
    
    if (!standardContact) {
      console.error('‚ùå √âCHEC CRITIQUE : Aucun contact standard valide trouv√©');
      return {
        contacts: [],
        sources: ['Perplexity (√©chec)'],
        success: false,
        error: 'Impossible de r√©cup√©rer les coordonn√©es standard de l\'entreprise'
      };
    }

    console.log('‚úÖ Contact standard valid√©:', {
      nom: standardContact.nom,
      email: standardContact.email,
      phone: standardContact.phone,
      sources: standardContact.sources
    });

    // 2Ô∏è‚É£ Recherche Apollo (contacts sp√©cifiques - optionnel)
    const apolloResult = await this.searchWithApollo(request);

    // Construction de la liste finale
    let mergedContacts: ContactInfo[];
    let method: 'apollo+perplexity' | 'perplexity-fallback';

    if (apolloResult.contacts && apolloResult.contacts.length > 0) {
      // Standard en premier + contacts Apollo
      mergedContacts = [standardContact, ...apolloResult.contacts];
      method = 'apollo+perplexity';
      console.log(`‚úÖ R√©sultat final: 1 standard + ${apolloResult.contacts.length} Apollo = ${mergedContacts.length} contacts`);
    } else {
      // Uniquement le contact standard
      mergedContacts = [standardContact];
      method = 'perplexity-fallback';
      console.log('‚úÖ R√©sultat final: 1 contact standard uniquement');
    }

    const allSources = [
      ...standardContact.sources,
      ...(apolloResult.sources || [])
    ];

    return {
      contacts: mergedContacts,
      sources: [...new Set(allSources)],
      success: true,
      method
    };
  }

  /**
   * Recherche robuste du contact standard avec retry et multiples strat√©gies
   */
  private async searchCompanyStandardWithRetry(
    request: ContactSearchRequest, 
    maxRetries: number = 3
  ): Promise<ContactSearchResult> {
    
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
      try {
        console.log(`üîÑ Tentative Perplexity ${attempt}/${maxRetries}`);
        
        // Strat√©gie 1: Recherche cibl√©e (tentatives 1-2)
        if (attempt <= 2) {
          const result = await this.searchCompanyStandardTargeted(request);
          if (this.isValidStandardContact(result.contacts[0])) {
            console.log(`‚úÖ Succ√®s tentative ${attempt} (cibl√©e)`);
            return result;
          }
        }
        
        // Strat√©gie 2: Recherche √©largie (tentative 3)
        if (attempt === 3) {
          const result = await this.searchCompanyStandardBroad(request);
          if (this.isValidStandardContact(result.contacts[0])) {
            console.log(`‚úÖ Succ√®s tentative ${attempt} (√©largie)`);
            return result;
          }
        }
        
        console.warn(`‚ö†Ô∏è Tentative ${attempt}/${maxRetries} - Contact incomplet`);
        
      } catch (error: any) {
        console.error(`‚ùå Tentative ${attempt}/${maxRetries} √©chou√©e:`, error.message);
      }

      // Attente progressive entre les tentatives
      if (attempt < maxRetries) {
        const delayMs = 1500 * attempt;
        console.log(`‚è≥ Attente de ${delayMs}ms avant nouvelle tentative...`);
        await this.delay(delayMs);
      }
    }

    // √âchec complet apr√®s toutes les tentatives
    console.error('‚ùå √âCHEC TOTAL : Impossible de r√©cup√©rer les coordonn√©es standard');
    return {
      contacts: [],
      sources: ['Perplexity (√©chec)'],
      success: false,
      error: 'Toutes les tentatives ont √©chou√©'
    };
  }

  /**
   * Strat√©gie 1: Recherche cibl√©e et pr√©cise
   */
  private async searchCompanyStandardTargeted(request: ContactSearchRequest): Promise<ContactSearchResult> {
    const prompt = `
Trouve les coordonn√©es OFFICIELLES de contact de l'entreprise "${request.nomEntreprise}"${request.zoneGeographique ? ` situ√©e en ${request.zoneGeographique}` : ''}.

RECHERCHE OBLIGATOIRE :
1. Email de contact g√©n√©ral (contact@, info@, commercial@, accueil@)
2. Num√©ro de t√©l√©phone du standard

SOURCES √Ä CONSULTER EN PRIORIT√â :
- Site web officiel de l'entreprise
- Pages "Contact" ou "Nous contacter"
- Mentions l√©gales
- Annuaires professionnels officiels

RETOURNE UNIQUEMENT CE JSON (aucun texte avant/apr√®s) :
{
  "contacts": [{
    "nom": "${request.nomEntreprise}",
    "prenom": "",
    "poste": "Standard",
    "email": "email_officiel_trouv√©",
    "phone": "telephone_standard_au_format_+33XXXXXXXXX",
    "sources": ["Site officiel", "Page contact"]
  }],
  "sources": ["Site officiel"]
}

R√àGLES STRICTES :
- Email ET t√©l√©phone sont OBLIGATOIRES
- Format t√©l√©phone : +33XXXXXXXXX (sans espaces)
- Si l'un des deux manque : chercher plus profond√©ment
- NE PAS inventer de coordonn√©es
- Retourner UNIQUEMENT le JSON valide
`;

    return await this.executePerplexitySearch(prompt, request);
  }

  /**
   * Strat√©gie 2: Recherche √©largie avec plusieurs sources
   */
  private async searchCompanyStandardBroad(request: ContactSearchRequest): Promise<ContactSearchResult> {
    const prompt = `
Recherche EXHAUSTIVE des coordonn√©es de "${request.nomEntreprise}"${request.zoneGeographique ? ` en ${request.zoneGeographique}` : ''}.

MISSION CRITIQUE : Trouver email ET t√©l√©phone

SOURCES √Ä EXPLORER :
1. Site web officiel (toutes les pages)
2. R√©seaux sociaux professionnels (LinkedIn, Facebook)
3. Annuaires (Pages Jaunes, Kompass, etc.)
4. Articles de presse mentionnant l'entreprise
5. Bases de donn√©es publiques

FORMAT DE R√âPONSE (JSON uniquement) :
{
  "contacts": [{
    "nom": "${request.nomEntreprise}",
    "prenom": "",
    "poste": "Contact entreprise",
    "email": "adresse_email_trouv√©e",
    "phone": "num√©ro_format_international",
    "sources": ["sources_utilis√©es"]
  }],
  "sources": ["sources_principales"]
}

IMPORTANT :
- Les deux coordonn√©es (email + t√©l√©phone) sont INDISPENSABLES
- V√©rifier plusieurs sources pour fiabilit√©
- Pr√©f√©rer les coordonn√©es g√©n√©riques officielles
- Format t√©l√©phone international obligatoire
`;

    return await this.executePerplexitySearch(prompt, request);
  }

  /**
   * Ex√©cution de la recherche Perplexity avec parsing robuste
   */
  private async executePerplexitySearch(
    prompt: string, 
    request: ContactSearchRequest
  ): Promise<ContactSearchResult> {
    
    try {
      const response = await axios.post(
        `${this.perplexityBaseUrl}/chat/completions`,
        {
          model: 'sonar',
          messages: [
            { 
              role: 'system', 
              content: 'Tu es un assistant de recherche sp√©cialis√© dans la recherche de coordonn√©es d\'entreprises. Tu retournes UNIQUEMENT du JSON valide RFC 8259, sans aucun texte additionnel, markdown ou commentaire.' 
            },
            { role: 'user', content: prompt }
          ],
          temperature: 0.1,
          max_tokens: 2000,
          return_citations: true,
          search_recency_filter: 'month'
        },
        {
          headers: {
            'Authorization': `Bearer ${this.perplexityApiKey}`,
            'Content-Type': 'application/json'
          },
          timeout: 60000 // 60 secondes pour recherche approfondie
        }
      );

      const content = response.data.choices[0]?.message?.content || '';
      console.log('üìÑ R√©ponse Perplexity re√ßue:', content.substring(0, 200));
      
      // Nettoyage et parsing JSON
      const cleanedJson = this.cleanJsonResponse(content);
      const parsed = JSON.parse(cleanedJson);

      // Formatage et validation du contact
      const contacts = (parsed.contacts || [])
        .map((contact: any) => this.formatStandardContact(contact, request))
        .filter((contact: ContactInfo | null) => contact !== null);

      if (contacts.length === 0) {
        throw new Error('Aucun contact valide apr√®s parsing');
      }

      console.log('‚úÖ Contact standard pars√©:', {
        hasEmail: !!contacts[0].email,
        hasPhone: !!contacts[0].phone
      });

      return {
        contacts: contacts,
        sources: parsed.sources || ['Perplexity'],
        success: true
      };

    } catch (error: any) {
      console.error('‚ùå Erreur executePerplexitySearch:', error.message);
      throw error;
    }
  }

  /**
   * Formatage strict du contact standard
   */
  private formatStandardContact(
    rawContact: any, 
    request: ContactSearchRequest
  ): ContactInfo | null {
    
    const email = this.validateAndCleanEmail(rawContact.email);
    const phone = this.validateAndCleanPhone(rawContact.phone);

    // Contact invalide si manque email OU t√©l√©phone
    if (!email || !phone) {
      console.warn('‚ö†Ô∏è Contact incomplet:', { 
        hasEmail: !!email, 
        hasPhone: !!phone 
      });
      return null;
    }

    return {
      nom: rawContact.nom || request.nomEntreprise,
      prenom: '',
      poste: rawContact.poste || 'Standard / Accueil',
      email: email,
      phone: phone,
      linkedin_url: undefined,
      verified: true,
      relevance_score: 1.0,
      sources: Array.isArray(rawContact.sources) ? rawContact.sources : ['Site officiel']
    };
  }

  /**
   * Validation stricte du contact standard
   */
  private validateStandardContact(contact: ContactInfo | undefined): ContactInfo | null {
    if (!contact) {
      console.error('‚ùå Contact undefined');
      return null;
    }

    const isValid = Boolean(
      contact.nom &&
      contact.email &&
      contact.phone &&
      this.isValidEmail(contact.email) &&
      this.isValidPhone(contact.phone)
    );

    if (!isValid) {
      console.error('‚ùå Contact standard invalide:', {
        hasNom: !!contact.nom,
        hasEmail: !!contact.email,
        hasPhone: !!contact.phone,
        emailValid: contact.email ? this.isValidEmail(contact.email) : false,
        phoneValid: contact.phone ? this.isValidPhone(contact.phone) : false
      });
      return null;
    }

    return contact;
  }

  /**
   * Validation et nettoyage d'email
   */
  private validateAndCleanEmail(email: any): string | undefined {
    if (!email || typeof email !== 'string') return undefined;
    
    const cleaned = email.trim().toLowerCase();
    
    if (!this.isValidEmail(cleaned)) return undefined;
    
    return cleaned;
  }

  private isValidEmail(email: string): boolean {
    // Format basique
    const emailRegex = /^[a-z0-9][a-z0-9._-]*@[a-z0-9][a-z0-9.-]*\.[a-z]{2,}$/i;
    if (!emailRegex.test(email)) return false;
    
    // Exclusions
    const invalidPatterns = [
      'example.com',
      'test.com',
      'placeholder',
      'noreply',
      'no-reply',
      'donotreply',
      'email_trouv√©',
      'email_officiel'
    ];
    
    return !invalidPatterns.some(pattern => email.includes(pattern));
  }

  /**
   * Validation et nettoyage de t√©l√©phone
   */
  private validateAndCleanPhone(phone: any): string | undefined {
    if (!phone || typeof phone !== 'string') return undefined;
    
    const cleaned = this.formatInternationalPhone(phone);
    
    if (!this.isValidPhone(cleaned)) return undefined;
    
    return cleaned;
  }

  private isValidPhone(phone: string): boolean {
    // Doit √™tre au format international avec au moins 10 chiffres
    const phoneRegex = /^\+\d{10,15}$/;
    if (!phoneRegex.test(phone)) return false;
    
    // Exclusions
    const invalidPatterns = [
      'telephone_trouv√©',
      'num√©ro_format',
      '0000000000',
      '1111111111'
    ];
    
    return !invalidPatterns.some(pattern => phone.includes(pattern));
  }

  private formatInternationalPhone(phone: string): string {
    // Nettoyer tous les caract√®res non-num√©riques sauf le +
    let cleaned = phone.replace(/[^\d+]/g, '');
    
    // Convertir les formats fran√ßais
    if (cleaned.startsWith('0') && cleaned.length === 10) {
      cleaned = '+33' + cleaned.substring(1);
    } else if (cleaned.startsWith('00')) {
      cleaned = '+' + cleaned.substring(2);
    } else if (!cleaned.startsWith('+')) {
      cleaned = '+' + cleaned;
    }
    
    return cleaned;
  }

  /**
   * V√©rification de validit√© du contact standard
   */
  private isValidStandardContact(contact: ContactInfo | undefined): boolean {
    if (!contact) return false;
    
    return Boolean(
      contact.nom &&
      contact.email &&
      contact.phone &&
      this.isValidEmail(contact.email) &&
      this.isValidPhone(contact.phone)
    );
  }

  /**
   * Nettoyage robuste JSON
   */
  private cleanJsonResponse(content: string): string {
    let cleaned = content.trim();
    
    // Supprimer markdown
    cleaned = cleaned.replace(/```(?:json)?\s*/gi, '');
    
    // Extraire JSON
    const firstBrace = cleaned.indexOf('{');
    const lastBrace = cleaned.lastIndexOf('}');
    
    if (firstBrace === -1 || lastBrace === -1) {
      throw new Error('Pas de JSON trouv√© dans la r√©ponse');
    }
    
    cleaned = cleaned.substring(firstBrace, lastBrace + 1);
    
    // Corrections
    cleaned = cleaned
      .replace(/,(\s*[}\]])/g, '$1')
      .replace(/:\s*'([^']*)'/g, ': "$1"');
    
    return cleaned;
  }

  private delay(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  /**
   * Recherche Apollo (inchang√©e)
   */
  private async searchWithApollo(request: ContactSearchRequest): Promise<ContactSearchResult> {
    console.log('üîç Recherche via Apollo...');
    
    try {
      const searchParams = this.buildApolloSearchParams(request);
      
      const response = await axios.post(
        `${this.apolloBaseUrl}/mixed_people/search`,
        searchParams,
        {
          headers: {
            'Content-Type': 'application/json',
            'Cache-Control': 'no-cache',
            'X-Api-Key': this.apolloApiKey
          },
          timeout: 30000
        }
      );
      
      console.log('‚úÖ R√©ponse Apollo re√ßue:', {
        status: response.status,
        totalContacts: response.data.people?.length || 0
      });
      
      return this.parseApolloResponse(response.data, request);
      
    } catch (error: any) {
      console.error('‚ùå Erreur Apollo API:', error.message);
      return {
        contacts: [],
        sources: ['Apollo.io'],
        success: false,
        error: `Erreur Apollo: ${error.message}`
      };
    }
  }

  private buildApolloSearchParams(request: ContactSearchRequest): any {
    const searchParams: any = {
      page: 1,
      per_page: request.nombreResultats || 25,
      q_organization_name: request.nomEntreprise
    };

    if (request.zoneGeographique) {
      searchParams.person_locations = [request.zoneGeographique];
    }

    return searchParams;
  }

  private parseApolloResponse(response: any, request: ContactSearchRequest): ContactSearchResult {
    try {
      if (!response.people || !Array.isArray(response.people)) {
        return {
          contacts: [],
          sources: ['Apollo.io'],
          success: true
        };
      }

      const contacts: ContactInfo[] = response.people
        .filter((person: any) => {
          const organizationName = person.organization?.name?.toLowerCase().trim() || '';
          const targetCompany = request.nomEntreprise.toLowerCase().trim();
          return organizationName.includes(targetCompany) || targetCompany.includes(organizationName);
        })
        .map((person: any) => {
          let phone: string | undefined;
          if (person.phone_numbers && person.phone_numbers.length > 0) {
            const primaryPhone = person.phone_numbers.find((p: any) => p.type === 'work') || person.phone_numbers[0];
            phone = this.formatInternationalPhone(primaryPhone.sanitized_number || primaryPhone.raw_number);
          }

          const contact: ContactInfo = {
            nom: person.last_name || '',
            prenom: person.first_name || '',
            poste: person.title || '',
            email: this.validateAndCleanEmail(person.email),
            phone: phone,
            linkedin_url: person.linkedin_url ? person.linkedin_url : undefined,
            verified: true,
            accroche_personnalisee: this.generatePersonalizedPitch(person, request.nomEntreprise),
            sources: ['Apollo.io'],
            relevance_score: 0.7
          };

          contact.accroche = contact.accroche_personnalisee;
          contact.pitch = contact.accroche_personnalisee;

          return contact;
        })
        .filter((contact: ContactInfo) => contact.nom && contact.prenom && contact.poste);

      const limitedContacts = contacts.slice(0, request.nombreResultats || 25);

      console.log(`‚úÖ ${limitedContacts.length} contacts Apollo retourn√©s`);

      return {
        contacts: limitedContacts,
        sources: ['Apollo.io'],
        success: true
      };

    } catch (error: any) {
      console.error('‚ùå Erreur parsing Apollo:', error);
      return {
        contacts: [],
        sources: ['Apollo.io'],
        success: false,
        error: error.message
      };
    }
  }

  private generatePersonalizedPitch(person: any, entreprise: string): string {
    const prenom = person.first_name || '';
    const poste = person.title || 'votre r√¥le';
    
    return `Bonjour ${prenom}, en tant que ${poste} chez ${entreprise}, nous pensons que notre expertise en composants m√©caniques pourrait vous int√©resser. Seriez-vous disponible pour un √©change rapide ?`;
  }
}