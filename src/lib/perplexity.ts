// lib/perplexity.ts - Corrected version with robust JSON parsing
import axios from 'axios';

interface Enterprise {
  nom_entreprise: string;
  site_web: string;
  description_activite: string;
  produits_entreprise: string[];
  potentiel_cgr: {
    produits_cibles_chez_le_prospect: string[];
    produits_cgr_a_proposer: string[];
    argumentaire_approche: string;
  };
  fournisseur_actuel_estimation: string;
  sources: string[];
  taille_entreprise: string;
  volume_pieces_estime: string;
  zone_geographique: string;
}

interface EnterpriseSearchData {
  secteursActivite: string[];
  zoneGeographique: string[];
  tailleEntreprise: string;
  motsCles: string;
  produitsCGR: string[];
  clientsExclure: string;
  usinesCGR: string[];
  nombreResultats: number;
  typeRecherche?: string;
  secteurActiviteLibre?: string;
  zoneGeographiqueLibre?: string;
}

export class PerplexityEnterpriseClient {
  private apiKey: string;
  private baseUrl = 'https://api.perplexity.ai';
  private maxRetries = 3;

  constructor() {
    this.apiKey = process.env.PERPLEXITY_API_KEY!;
    if (!this.apiKey) {
      throw new Error('PERPLEXITY_API_KEY manquante');
    }
  }

  async searchEnterprises(searchData: EnterpriseSearchData): Promise<any> {
    const prompt = this.buildEnterpriseSearchPrompt(searchData);
    
    let lastError: Error | null = null;
    
    for (let attempt = 1; attempt <= this.maxRetries; attempt++) {
      try {
        console.log(`Tentative ${attempt}/${this.maxRetries} - Recherche Perplexity...`);
        
        const allSectors = [
          ...(searchData.secteursActivite || []),
          ...(searchData.secteurActiviteLibre ? [searchData.secteurActiviteLibre] : [])
        ].filter(Boolean);
        
        const allZones = [
          ...(searchData.zoneGeographique || []),
          ...(searchData.zoneGeographiqueLibre ? [searchData.zoneGeographiqueLibre] : [])
        ].filter(Boolean);
        
        console.log('Param√®tres:', {
          secteur: allSectors[0] || 'Non sp√©cifi√©',
          zone: allZones.join(', '),
          r√©sultats: searchData.nombreResultats
        });
        
        const response = await axios.post(
          `${this.baseUrl}/chat/completions`,
          {
            model: 'sonar',
            messages: [
              { role: 'system', content: this.getSystemPrompt() },
              { role: 'user', content: prompt }
            ],
            max_tokens: 8000,
            temperature: 0.1,
            search_recency_filter: 'month',
            search_domain_filter: [
              'linkedin.com', 
              'companieshouse.gov.uk', 
              'societe.com', 
              'verif.com',
              'kompass.com',
              'europages.com',
              'kellysearch.com',
              'infogreffe.fr',
              'northdata.com',
              'companiesintheuk.co.uk'
            ]
          },
          {
            headers: {
              'Authorization': `Bearer ${this.apiKey}`,
              'Content-Type': 'application/json'
            },
            timeout: 900000,
            validateStatus: (status) => status < 500
          }
        );
        
        if (response.status >= 400) {
          throw new Error(`API Error ${response.status}: ${JSON.stringify(response.data)}`);
        }
        
        console.log('R√©ponse Perplexity re√ßue');
        const result = this.parseEnterpriseResponse(response.data);
        
        if (result.success && result.enterprises.length > 0) {
          console.log(`‚úì Succ√®s: ${result.enterprises.length} entreprises`);
          return result;
        }
        
        if (result.success) {
          return result;
        }
        
        throw new Error(result.error || 'Parsing failed');
        
      } catch (error: any) {
        lastError = error;
        console.error(`‚úó Tentative ${attempt} √©chou√©e:`, error.message);
        
        if (error.response?.status === 400 || error.response?.status === 401) {
          break;
        }
        
        if (attempt < this.maxRetries) {
          const delay = Math.min(1000 * Math.pow(2, attempt), 10000);
          console.log(`‚è≥ Nouvelle tentative dans ${delay}ms...`);
          await new Promise(resolve => setTimeout(resolve, delay));
        }
      }
    }
    
    console.error('‚úó Toutes les tentatives ont √©chou√©');
    return {
      enterprises: [],
      total: 0,
      success: false,
      error: lastError?.message || '√âchec apr√®s plusieurs tentatives'
    };
  }

  private getSystemPrompt(): string {
    return `Tu es un expert en intelligence √©conomique sp√©cialis√© dans l'identification de prospects FABRICANTS pour CGR International.

R√àGLE CRITIQUE: Retourne UNIQUEMENT un objet JSON valide. 
- PAS de texte avant ou apr√®s le JSON
- PAS de commentaires dans le JSON
- PAS de virgules en fin de tableau ou objet
- Commence par { et termine par }
- Tous les guillemets doivent √™tre √©chapp√©s correctement

IMP√âRATIF: Chaque objet entreprise doit √™tre COMPLET avec TOUTES les propri√©t√©s.

Format JSON OBLIGATOIRE:
{
  "enterprises": [
    {
      "nom_entreprise": "Nom complet de l'entreprise",
      "site_web": "https://example.com",
      "description_activite": "Description d√©taill√©e de l'activit√© de fabrication",
      "produits_entreprise": ["Produit 1", "Produit 2", "Produit 3"],
      "potentiel_cgr": {
        "produits_cibles_chez_le_prospect": ["Composant A", "Composant B"],
        "produits_cgr_a_proposer": ["Solution CGR 1", "Solution CGR 2"],
        "argumentaire_approche": "Argumentaire commercial d√©taill√© minimum 200 mots expliquant pourquoi CGR est pertinent pour ce prospect"
      },
      "fournisseur_actuel_estimation": "Nom du fournisseur actuel probable",
      "sources": ["https://source1.com", "https://source2.com"],
      "taille_entreprise": "PME ou ETI ou Grande entreprise",
      "volume_pieces_estime": "Estimation du volume (Faible/Moyen/√âlev√©/Tr√®s √©lev√©)",
      "zone_geographique": "Ville pr√©cise, R√©gion, Pays"
    }
  ]
}

R√àGLES STRICTES POUR LA VALIDIT√â JSON:
1. N'utilise QUE des guillemets doubles (") - jamais de guillemets simples (')
2. √âchappe tous les guillemets dans les valeurs avec un backslash
3. Pas de retours √† la ligne dans les valeurs texte - remplace par des espaces
4. Remplace les apostrophes fran√ßaises par des apostrophes simples normales
5. Pas de virgule apr√®s le dernier √©l√©ment d'un tableau ou objet
6. Tous les nombres sans guillemets, tous les textes avec guillemets

IMPORTANT:
- Chaque entreprise DOIT avoir TOUTES les propri√©t√©s remplies
- L'argumentaire_approche DOIT faire minimum 200 mots
- Les tableaux ne doivent JAMAIS √™tre vides
- Si une info manque, mets "Non sp√©cifi√©" mais GARDE la propri√©t√©

MISSION: Identifier 5-10 FABRICANTS avec usines de production.

PRODUITS CGR: Ressorts, pi√®ces d√©coup√©es, formage tubes, assemblages, m√©catronique, injection plastique.

EXCLUSIONS: Revendeurs, distributeurs, installateurs, fabricants de ressorts/pi√®ces d√©coup√©es (concurrents directs).`;
  }

  private buildEnterpriseSearchPrompt(data: EnterpriseSearchData): string {
    const staticClients = ['Forvia', 'Valeo', 'Schneider Electric', 'Dassault Aviation', 'Thales', 'Safran'];
    
    let additionalClients: string[] = [];
    if (data.clientsExclure && data.clientsExclure.trim() !== '') {
      additionalClients = data.clientsExclure
        .split('\n')
        .map(client => client.trim())
        .filter(client => client !== '' && !staticClients.includes(client));
    }
    
    const excludeClients = [...staticClients, ...additionalClients];

    const allSectors = [
      ...(data.secteursActivite || []),
      ...(data.secteurActiviteLibre ? [data.secteurActiviteLibre.trim()] : [])
    ].filter(s => s && s.trim() !== '');
    
    const secteurPrincipal = allSectors.length > 0 ? allSectors[0] : 'Industriel';
    
    const allZones = [
      ...(data.zoneGeographique || []),
      ...(data.zoneGeographiqueLibre ? [data.zoneGeographiqueLibre.trim()] : [])
    ].filter(z => z && z.trim() !== '');
    
    const zoneGeo = allZones.length > 0 ? allZones.join(', ') : 'France et Europe';
    
    const produitsCGRSpecifiques = data.produitsCGR && data.produitsCGR.length > 0 
      ? data.produitsCGR 
      : ['Ressorts fil', 'Pi√®ces d√©coup√©es', 'Formage tubes', 'Assemblages', 'M√©catronique', 'Injection plastique'];

    return `RECHERCHE: ${data.nombreResultats} entreprises FABRICANTES pour CGR International

R√âPONDS UNIQUEMENT AVEC UN JSON VALIDE - PAS DE TEXTE AVANT/APR√àS - PAS DE MARKDOWN

Secteur cible: ${secteurPrincipal}
Zone g√©ographique: ${zoneGeo}
Taille entreprise: ${data.tailleEntreprise || 'Toutes tailles'}
Produits CGR √† proposer: ${produitsCGRSpecifiques.join(', ')}
Clients √† exclure: ${excludeClients.join(', ')}

OBJECTIF: Trouver ${data.nombreResultats} FABRICANTS (minimum 5) avec:
- Usines de production identifi√©es
- Besoins potentiels en composants CGR
- Informations compl√®tes sur chaque entreprise

ATTENTION: Chaque objet entreprise doit √™tre COMPLET avec toutes les propri√©t√©s remplies.

RETOURNE UNIQUEMENT LE JSON COMPLET commen√ßant par { et finissant par }`;
  }

  private parseEnterpriseResponse(response: any): { 
    enterprises: Enterprise[], 
    total: number, 
    success: boolean, 
    error?: string 
  } {
    try {
      let content = response.choices?.[0]?.message?.content || '';
      
      if (!content) {
        console.error('‚úó Contenu vide re√ßu de Perplexity');
        return this.createEmptyResponse('Aucun contenu re√ßu');
      }
      
      const originalLength = content.length;
      console.log(`üìÑ Contenu re√ßu: ${originalLength} caract√®res`);
      
      // Step 1: Remove markdown and wrapper tags
      content = this.cleanMarkdownAndTags(content);
      
      // Step 2: Extract JSON boundaries
      content = this.extractJSONContent(content);
      
      if (!content) {
        console.error('‚úó Impossible d\'extraire le JSON');
        return this.extractPartialEnterprises(response.choices?.[0]?.message?.content || '');
      }
      
      console.log(`üìä JSON extrait: ${content.length} caract√®res`);
      console.log('üîç D√©but:', content.substring(0, 100));
      console.log('üîç Fin:', content.slice(-100));
      
      // Step 3: Validate and repair structure
      const validation = this.validateJSONStructure(content);
      if (!validation.valid) {
        console.warn('‚ö†Ô∏è Structure JSON invalide:', validation.error);
        content = this.repairJSONStructure(content);
        console.log('üîß JSON r√©par√©');
      } else {
        console.log('‚úì Structure JSON valide');
      }
      
      // Step 4: Clean problematic characters
      content = this.cleanJSONString(content);
      
      // Step 5: Parse
      let parsed: any;
      try {
  parsed = JSON.parse(content);
  
  // NEW: Handle French key name
  if (parsed.entreprises && !parsed.enterprises) {
    parsed.enterprises = parsed.entreprises;
    delete parsed.entreprises;
  }
  
  console.log('‚úì Parsing JSON r√©ussi');
      } catch (error: any) {
        console.error('‚úó Parsing √©chou√©:', error.message);
        const errorPos = this.extractErrorPosition(error.message);
        if (errorPos) {
          console.log(`üìç Erreur √† la position ${errorPos}:`);
          console.log(content.substring(Math.max(0, errorPos - 50), errorPos + 50));
        }
        
        // Advanced repair attempt
        content = this.advancedJSONRepair(content);
        
        try {
          parsed = JSON.parse(content);
          console.log('‚úì Parsing r√©ussi apr√®s r√©paration avanc√©e');
        } catch (error2: any) {
          console.error('‚úó Parsing √©chou√© d√©finitivement:', error2.message);
          return this.extractPartialEnterprises(response.choices?.[0]?.message?.content || '');
        }
      }
      
      // Step 6: Validate and clean enterprises
      if (!parsed || typeof parsed !== 'object') {
        console.error('‚úó R√©sultat pars√© n\'est pas un objet');
        return this.extractPartialEnterprises(content);
      }
      
      if (!Array.isArray(parsed.enterprises)) {
        console.error('‚úó enterprises n\'est pas un tableau');
        return this.extractPartialEnterprises(content);
      }
      
      const cleanedEnterprises = this.validateAndCleanEnterprises(parsed.enterprises);
      console.log(`‚úì ${cleanedEnterprises.length} entreprises valides extraites`);
      
      return {
        enterprises: cleanedEnterprises,
        total: cleanedEnterprises.length,
        success: true
      };
      
    } catch (error: any) {
      console.error('‚úó Erreur parsing finale:', error.message);
      return this.createEmptyResponse(error.message);
    }
  }

  private cleanMarkdownAndTags(content: string): string {
    return content
      .replace(/<think>[\s\S]*?<\/think>/g, '')
      .replace(/```json\s*/g, '')
      .replace(/```\s*/g, '')
      .trim();
  }

  private extractJSONContent(content: string): string {
    const firstBrace = content.indexOf('{');
    const lastBrace = content.lastIndexOf('}');
    
    if (firstBrace === -1 || lastBrace === -1 || firstBrace >= lastBrace) {
      console.error('‚úó Pas de JSON valide trouv√©');
      return '';
    }
    
    if (firstBrace > 0) {
      console.log(`üîß Suppression de ${firstBrace} caract√®res avant le JSON`);
    }
    
    if (lastBrace < content.length - 1) {
      console.log(`üîß Suppression de ${content.length - lastBrace - 1} caract√®res apr√®s le JSON`);
    }
    
    return content.substring(firstBrace, lastBrace + 1);
  }

  private validateJSONStructure(str: string): {
    valid: boolean;
    error?: string;
  } {
    let openBraces = 0, closeBraces = 0;
    let openBrackets = 0, closeBrackets = 0;
    let inString = false;
    let escaped = false;
    
    for (let i = 0; i < str.length; i++) {
      const char = str[i];
      
      if (escaped) {
        escaped = false;
        continue;
      }
      
      if (char === '\\') {
        escaped = true;
        continue;
      }
      
      if (char === '"') {
        inString = !inString;
        continue;
      }
      
      if (inString) continue;
      
      if (char === '{') openBraces++;
      if (char === '}') closeBraces++;
      if (char === '[') openBrackets++;
      if (char === ']') closeBrackets++;
    }
    
    if (openBraces !== closeBraces) {
      return { 
        valid: false, 
        error: `Accolades non appari√©es: ${openBraces} ouvertes, ${closeBraces} ferm√©es` 
      };
    }
    
    if (openBrackets !== closeBrackets) {
      return { 
        valid: false, 
        error: `Crochets non appari√©s: ${openBrackets} ouverts, ${closeBrackets} ferm√©s` 
      };
    }
    
    if (inString) {
      return { 
        valid: false, 
        error: 'Cha√Æne non ferm√©e d√©tect√©e' 
      };
    }
    
    return { valid: true };
  }

  private repairJSONStructure(str: string): string {
    let repaired = str;
    
    const openBraces = (str.match(/{/g) || []).length;
    const closeBraces = (str.match(/}/g) || []).length;
    const openBrackets = (str.match(/\[/g) || []).length;
    const closeBrackets = (str.match(/\]/g) || []).length;
    
    if (openBrackets > closeBrackets) {
      const missing = openBrackets - closeBrackets;
      console.log(`üîß Ajout de ${missing} crochets fermants`);
      repaired += ']'.repeat(missing);
    }
    
    if (openBraces > closeBraces) {
      const missing = openBraces - closeBraces;
      console.log(`üîß Ajout de ${missing} accolades fermantes`);
      repaired += '}'.repeat(missing);
    }
    
    return repaired;
  }

  private cleanJSONString(str: string): string {
    return str
      .replace(/[\u0000-\u001F\u007F-\u009F]/g, '')
      .replace(/\r\n/g, ' ')
      .replace(/\n/g, ' ')
      .replace(/\t/g, ' ')
      .replace(/[""]/g, '"')
      .replace(/['']/g, "'")
      .replace(/\s+/g, ' ')
      .trim();
  }

  private advancedJSONRepair(str: string): string {
    return str
      .replace(/,(\s*[}\]])/g, '$1')
      .replace(/}\s*{/g, '},{')
      .replace(/]\s*\[/g, '],[')
      .replace(/"(\w+)":\s*"([^"]*)"([^,}\]])/g, '"$1":"$2",$3')
      .replace(/([}\]])(\s*)"(\w+)":/g, '$1,$2"$3":');
  }

  private extractErrorPosition(errorMsg: string): number | null {
    const match = errorMsg.match(/position (\d+)/);
    return match ? parseInt(match[1], 10) : null;
  }

  private extractPartialEnterprises(content: string): {
    enterprises: Enterprise[];
    total: number;
    success: boolean;
    error?: string;
  } {
    console.log('üîç Tentative d\'extraction partielle...');
    
    const enterprises: Enterprise[] = [];
    const pattern = /{[^{}]*"nom_entreprise"\s*:\s*"([^"]+)"[^{}]*}/g;
    const matches = content.matchAll(pattern);
    
    for (const match of matches) {
      try {
        const obj = match[0];
        const nom = match[1];
        
        const siteMatch = obj.match(/"site_web"\s*:\s*"([^"]*)"/);
        const descMatch = obj.match(/"description_activite"\s*:\s*"([^"]*)"/);
        
        enterprises.push({
          nom_entreprise: nom.trim(),
          site_web: siteMatch ? this.cleanWebsiteUrl(siteMatch[1]) : '',
          description_activite: descMatch ? descMatch[1].trim() : 'Donn√©es extraites partiellement',
          produits_entreprise: [],
          potentiel_cgr: {
            produits_cibles_chez_le_prospect: [],
            produits_cgr_a_proposer: [],
            argumentaire_approche: 'Donn√©es extraites partiellement - validation requise'
          },
          fournisseur_actuel_estimation: '√Ä identifier',
          sources: [],
          taille_entreprise: 'Non sp√©cifi√©',
          volume_pieces_estime: 'Non sp√©cifi√©',
          zone_geographique: 'Non sp√©cifi√©e'
        });
        
        if (enterprises.length >= 10) break;
      } catch (err) {
        continue;
      }
    }
    
    if (enterprises.length > 0) {
      console.log(`‚úì Extraction partielle: ${enterprises.length} entreprises`);
      return {
        enterprises,
        total: enterprises.length,
        success: true
      };
    }
    
    console.error('‚úó √âchec extraction partielle');
    return this.createEmptyResponse('Impossible d\'extraire les donn√©es');
  }

  private createEmptyResponse(error: string): {
    enterprises: Enterprise[];
    total: number;
    success: boolean;
    error: string;
  } {
    return {
      enterprises: [],
      total: 0,
      success: false,
      error
    };
  }

  private validateAndCleanEnterprises(enterprises: any[]): Enterprise[] {
    return enterprises
      .filter(e => e && typeof e === 'object')
      .map(enterprise => {
        try {
          const nom = String(enterprise.nom_entreprise || enterprise.name || '').trim();
          if (!nom) return null;
          
          return {
            nom_entreprise: nom,
            site_web: this.cleanWebsiteUrl(enterprise.site_web || enterprise.website || ''),
            description_activite: String(enterprise.description_activite || enterprise.description || 'Non sp√©cifi√©').trim(),
            produits_entreprise: Array.isArray(enterprise.produits_entreprise) 
              ? enterprise.produits_entreprise.map((p: any) => String(p).trim()).filter(Boolean)
              : [],
            potentiel_cgr: {
              produits_cibles_chez_le_prospect: Array.isArray(enterprise.potentiel_cgr?.produits_cibles_chez_le_prospect)
                ? enterprise.potentiel_cgr.produits_cibles_chez_le_prospect.map((p: any) => String(p).trim()).filter(Boolean)
                : [],
              produits_cgr_a_proposer: Array.isArray(enterprise.potentiel_cgr?.produits_cgr_a_proposer)
                ? enterprise.potentiel_cgr.produits_cgr_a_proposer.map((p: any) => String(p).trim()).filter(Boolean)
                : [],
              argumentaire_approche: String(enterprise.potentiel_cgr?.argumentaire_approche || 'Non sp√©cifi√©').trim()
            },
            fournisseur_actuel_estimation: String(enterprise.fournisseur_actuel_estimation || 'Non sp√©cifi√©').trim(),
            sources: Array.isArray(enterprise.sources) 
              ? enterprise.sources.map((s: any) => String(s).trim()).filter(Boolean)
              : [],
            taille_entreprise: String(enterprise.taille_entreprise || 'Non sp√©cifi√©').trim(),
            volume_pieces_estime: String(enterprise.volume_pieces_estime || 'Non sp√©cifi√©').trim(),
            zone_geographique: String(enterprise.zone_geographique || enterprise.address || 'Non sp√©cifi√©e').trim()
          };
        } catch (error) {
          console.error('‚úó Erreur validation entreprise:', error);
          return null;
        }
      })
      .filter((e): e is Enterprise => e !== null)
      .slice(0, 15);
  }

  private cleanWebsiteUrl(url: string): string {
    if (!url || url.trim() === '') return '';
    
    let cleanedUrl = url.trim();
    cleanedUrl = cleanedUrl.replace(/^(https?:\/\/)?(www\.)?/, '');
    
    if (cleanedUrl.includes('.') && !cleanedUrl.includes(' ')) {
      cleanedUrl = `https://${cleanedUrl}`;
    } else {
      return '';
    }
    
    try {
      new URL(cleanedUrl);
      return cleanedUrl;
    } catch (error) {
      return '';
    }
  }
}