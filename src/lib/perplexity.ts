// Updated PerplexityEnterpriseClient with sonar-deep-research model
import axios from 'axios';

interface Enterprise {
  nom_entreprise: string;
  site_web: string;
  description_activite: string;
  produits_entreprise: string[];
  potentiel_cgr: {
    produits_cibles_chez_le_prospect: string[];
    produits_cgr_a_proposer: string[];
    argumentaire_approche: string;
  };
  fournisseur_actuel_estimation: string;
  sources: string[];
  taille_entreprise: string;
  volume_pieces_estime: string;
  zone_geographique: string;
}

interface EnterpriseSearchData {
  secteursActivite: string[];
  zoneGeographique: string[];
  tailleEntreprise: string;
  motsCles: string;
  produitsCGR: string[];
  clientsExclure: string;
  usinesCGR: string[];
  nombreResultats: number;
  typeRecherche?: string;
  secteurActiviteLibre?: string;
  zoneGeographiqueLibre?: string;
}

export class PerplexityEnterpriseClient {
  private apiKey: string;
  private baseUrl = 'https://api.perplexity.ai';

  constructor() {
    this.apiKey = process.env.PERPLEXITY_API_KEY!;
    if (!this.apiKey) {
      throw new Error('PERPLEXITY_API_KEY manquante');
    }
  }

  async searchEnterprises(searchData: EnterpriseSearchData): Promise<any> {
    const prompt = this.buildEnterpriseSearchPrompt(searchData);
    
    try {
      console.log('üîç Recherche d\'entreprises avec Perplexity Deep Research...');
      
      const allSectors = [
        ...(searchData.secteursActivite || []),
        ...(searchData.secteurActiviteLibre ? [searchData.secteurActiviteLibre] : [])
      ].filter(Boolean);
      
      const allZones = [
        ...(searchData.zoneGeographique || []),
        ...(searchData.zoneGeographiqueLibre ? [searchData.zoneGeographiqueLibre] : [])
      ].filter(Boolean);
      
      console.log('üìä Param√®tres de recherche:', {
        secteur: allSectors.length > 0 ? allSectors[0] : 'Non sp√©cifi√©',
        secteurs_complets: allSectors,
        zone: allZones.join(', '),
        taille: searchData.tailleEntreprise || 'Toutes tailles',
        produits: searchData.produitsCGR?.join(', ') || 'Tous produits CGR',
        clientsExclure: searchData.clientsExclure || 'Aucun',
        nombreResultats: searchData.nombreResultats
      });
      
      // CHANGED: Use sonar-deep-research model for better results
      const response = await axios.post(
        `${this.baseUrl}/chat/completions`,
        {
          model: 'sonar-deep-research', // Changed from 'sonar'
          messages: [
            { role: 'system', content: this.getSystemPrompt() },
            { role: 'user', content: prompt }
          ],
          max_tokens: 8000, // Increased token limit for more detailed responses
          temperature: 0.1, // Lowered for more focused results
          // ADDED: Enable search recency for better data
          search_recency_filter: 'month',
          search_domain_filter: ['linkedin.com', 'companieshouse.gov.uk', 'societe.com', 'verif.com']
        },
        {
          headers: {
            'Authorization': `Bearer ${this.apiKey}`,
            'Content-Type': 'application/json'
          },
          timeout: 900000 // Increased timeout for deep research
        }
      );
      
      console.log('‚úÖ R√©ponse Perplexity Deep Research re√ßue');
      return this.parseEnterpriseResponse(response.data);
    } catch (error: any) {
      console.error('‚ùå Erreur Perplexity API:', {
        status: error.response?.status,
        message: error.message,
        data: error.response?.data
      });
      
      return {
        enterprises: [],
        total: 0,
        success: false,
        error: `Perplexity API Error: ${error.response?.status || 'Unknown'} - ${error.message}`
      };
    }
  }

  private getSystemPrompt(): string {
    return `Tu es un expert en intelligence √©conomique sp√©cialis√© dans l'identification de prospects FABRICANTS pour CGR International, fabricant fran√ßais de composants m√©caniques industriels.

MISSION CRITIQUE: Identifier EXACTEMENT le nombre d'entreprises FABRICANTES demand√© (minimum ${10} entreprises) qui poss√®dent des USINES DE PRODUCTION et qui con√ßoivent/fabriquent des produits finis int√©grant des composants m√©caniques.

‚ö†Ô∏è OBLIGATION DE QUANTIT√â: Tu DOIS retourner au moins ${10} entreprises FABRICANTES valides. Si tu n'en trouves pas assez dans la premi√®re recherche, √©largis g√©ographiquement ou inclus des secteurs connexes, mais TOUJOURS en respectant les crit√®res de fabrication.

EXPERTISE CGR DISPONIBLE:
- Ressorts (fil, plat, torsion) - haute pr√©cision
- Pi√®ces d√©coup√©es de pr√©cision  
- Formage de tubes
- Assemblages automatis√©s
- M√©catronique
- Injection plastique

‚ö†Ô∏è ATTENTION FABRICANTS DE RESSORTS: Si une entreprise fabrique des ressorts, elle est CONCURRENTE de CGR ‚Üí √Ä EXCLURE ABSOLUMENT

STRAT√âGIE DE RECHERCHE INTENSIVE:
1. **RECHERCHE PRINCIPALE**: Secteur et zone sp√©cifi√©s par l'utilisateur
2. **RECHERCHE √âLARGIE**: Si moins de ${10} entreprises trouv√©es, inclure:
   - Secteurs connexes et compl√©mentaires
   - Zones g√©ographiques adjacentes
   - Entreprises de tailles variables dans la m√™me activit√©
   - Sous-secteurs sp√©cialis√©s

R√àGLES ABSOLUES DE CIBLAGE:
‚úÖ FABRICANTS UNIQUEMENT - RECHERCHE OBLIGATOIRE:
- Nom officiel complet de l'entreprise
- Localisation EXACTE des usines de production (ville, pays)
- Activit√© de CONCEPTION et FABRICATION de produits finis (pas distribution)
- Si partie d'un GROUPE: nom du groupe, maison-m√®re, autres filiales
- Produits SP√âCIFIQUES fabriqu√©s dans chaque usine
- Nombre d'employ√©s et chiffre d'affaires si disponible

‚úÖ CRIT√àRES DE QUALIFICATION OBLIGATOIRES:
Pour chaque entreprise incluse, tu DOIS v√©rifier et confirmer:
1. **FABRICATION R√âELLE**: Poss√®de des usines de production identifi√©es
2. **PRODUITS FINIS**: Con√ßoit et fabrique ses propres produits (pas de revente)
3. **COMPOSANTS M√âCANIQUES**: Utilise des composants compatibles avec l'offre CGR
4. **VOLUME COMPATIBLE**: Capacit√© de production adapt√©e aux sp√©cifications
5. **QUALIT√â INDUSTRIELLE**: Standards industriels et certifications
6. **POTENTIEL CGR**: Besoins r√©els en composants CGR sp√©cifi√©s

‚ùå EXCLURE ABSOLUMENT:
- Revendeurs, distributeurs, n√©gociants, importateurs
- Installateurs, int√©grateurs, bureau d'√©tudes
- Entreprises de services (maintenance, r√©paration, SAV)
- Grossistes en composants m√©caniques
- Fabricants de ressorts, pi√®ces d√©coup√©es, tubes (CONCURRENTS DIRECTS CGR)
- Entreprises nomm√©es "CGR" ou similaires
- Sous-traitants m√©caniques g√©n√©ralistes sans produits finis propres
- Filiales commerciales sans production

PROCESSUS DE VALIDATION STRICT:
Avant d'inclure UNE SEULE entreprise, tu DOIS rechercher et confirmer:
1. A-t-elle des USINES DE PRODUCTION identifi√©es ? (O√π exactement ?)
2. FABRIQUE-t-elle ses propres produits finis ? (Lesquels pr√©cis√©ment ?)
3. Fait-elle partie d'un GROUPE ? (Lequel ? Autres filiales ?)
4. A-t-elle des activit√©s R&D/conception ? (Dans quels domaines ?)
5. N'est-elle PAS uniquement distributrice/installatrice ?
6. Son volume de production est-il compatible avec les sp√©cifications ?

RECHERCHE MULTI-NIVEAU OBLIGATOIRE:
1. **NIVEAU 1**: Recherche directe dans le secteur et zone sp√©cifi√©s
2. **NIVEAU 2**: Si insuffisant, recherche dans secteurs connexes de la m√™me zone
3. **NIVEAU 3**: Si insuffisant, recherche dans zones adjacentes du m√™me secteur
4. **NIVEAU 4**: Si insuffisant, recherche de sous-traitants sp√©cialis√©s avec produits finis

SOURCES DE RECHERCHE PRIORITAIRES:
- Annuaires industriels officiels (KOMPASS, EUROPAGES, etc.)
- Registres du commerce et bases de donn√©es d'entreprises
- Sites web d'entreprises (section "Nos usines", "Production")
- Rapports sectoriels et √©tudes de march√©
- LinkedIn Company pages avec informations de production
- Salons professionnels et exposants manufacturiers

CONTRAINTES STRICTES MAINTENUES:
- Utiliser UNIQUEMENT les produits CGR sp√©cifi√©s par l'utilisateur
- Respecter la taille d'entreprise demand√©e (mais permettre une flexibilit√© si n√©cessaire pour atteindre le nombre requis)
- Cibler prioritairement la zone g√©ographique sp√©cifi√©e (√©largir si n√©cessaire)
- Adapter au volume de pi√®ces requis
- Dans l'argumentaire approche, tu DOIS obligatoirement d√©tailler:
  * Nom complet et raison sociale
  * Localisation EXACTE de chaque usine de production
  * Structure du groupe (maison-m√®re, filiales, autres sites)
  * Produits SP√âCIFIQUES fabriqu√©s dans chaque usine
  * Pourquoi elle a besoin EXACTEMENT des composants CGR
  * Volumes estim√©s et capacit√©s de production
  * Fournisseurs actuels probables

R√âPONSE JSON OBLIGATOIRE avec exactement cette structure (MINIMUM ${10} entreprises):
{
  "enterprises": [
    {
      "nom_entreprise": "Raison sociale compl√®te officielle",
      "site_web": "URL officielle",
      "description_activite": "Description d√©taill√©e de l'activit√© de FABRICATION uniquement",
      "produits_entreprise": ["Produit 1 fabriqu√©", "Produit 2 fabriqu√©", "..."],
      "potentiel_cgr": {
        "produits_cibles_chez_le_prospect": ["Composants utilis√©s dans produit 1", "Composants utilis√©s dans produit 2"],
        "produits_cgr_a_proposer": ["Uniquement les produits CGR sp√©cifi√©s par l'utilisateur"],
        "argumentaire_approche": "D√âTAILL√â: 1) Nom complet 2) Usines [Ville, Pays] 3) Groupe et structure 4) Produits fabriqu√©s 5) Besoins composants 6) Volumes et capacit√©s 7) Fournisseurs actuels - MINIMUM 250 mots"
      },
      "fournisseur_actuel_estimation": "Fournisseurs probables bas√©s sur recherche approfondie",
      "sources": ["Source 1 avec URL", "Source 2 avec URL", "Source 3 avec URL"],
      "taille_entreprise": "Taille exacte ou estim√©e",
      "volume_pieces_estime": "Volume compatible avec les sp√©cifications",
      "zone_geographique": "Zone g√©ographique pr√©cise avec pays"
    }
  ]
}

VALIDATION FINALE ULTRA-STRICTE:
- AU MOINS ${10} entreprises FABRICANTES qualifi√©es
- Chaque entreprise avec usines de production localis√©es
- Argumentaire d√©taill√© pour chaque entreprise (minimum 250 mots)
- Sources multiples et v√©rifiables
- Aucun concurrent direct CGR
- Potentiel CGR r√©aliste et document√©
- Si moins de ${10} entreprises trouv√©es initialement ‚Üí √âLARGIR LA RECHERCHE

IMPORTANT: Si tu ne peux pas trouver ${10} entreprises dans les crit√®res stricts, informe explicitement dans ta r√©ponse mais continue √† chercher avec des crit√®res l√©g√®rement √©largis tout en maintenant la qualit√© de fabricant.`;
  }

  private buildEnterpriseSearchPrompt(data: EnterpriseSearchData): string {
    // Keep existing buildEnterpriseSearchPrompt logic but add emphasis on quantity
    const staticClients = ['Forvia', 'Valeo', 'Schneider Electric', 'Dassault Aviation', 'Thales', 'Safran'];
    
    let additionalClients: string[] = [];
    if (data.clientsExclure && data.clientsExclure.trim() !== '') {
      additionalClients = data.clientsExclure
        .split('\n')
        .map(client => client.trim())
        .filter(client => client !== '' && !staticClients.includes(client));
    }
    
    const excludeClients = [...staticClients, ...additionalClients];

    const allSectors = [
      ...(data.secteursActivite || []),
      ...(data.secteurActiviteLibre ? [data.secteurActiviteLibre.trim()] : [])
    ].filter(s => s && s.trim() !== '');
    
    const secteurPrincipal = allSectors.length > 0 ? allSectors[0] : 'Industriel';
    
    const allZones = [
      ...(data.zoneGeographique || []),
      ...(data.zoneGeographiqueLibre ? [data.zoneGeographiqueLibre.trim()] : [])
    ].filter(z => z && z.trim() !== '');
    
    const zoneGeo = allZones.length > 0 ? allZones.join(', ') : 'France et Europe';
    
    const tailleEntreprise = data.tailleEntreprise || 'Toutes tailles';
    
    const produitsCGRSpecifiques = data.produitsCGR && data.produitsCGR.length > 0 
      ? data.produitsCGR 
      : ['Ressorts fil', 'Pi√®ces d√©coup√©es', 'Formage tubes', 'Assemblages', 'M√©catronique', 'Injection plastique'];
    
    const motsCles = data.motsCles || 'composants m√©caniques, pr√©cision, qualit√©';
    const usinesCGR = data.usinesCGR && data.usinesCGR.length > 0 ? data.usinesCGR : ['Saint-Yorre', 'PMPC', 'Ig√©'];

    return `RECHERCHE INTENSIVE: EXACTEMENT ${data.nombreResultats} entreprises FABRICANTES pour CGR International

‚ö†Ô∏è OBLIGATION QUANTIT√â: Tu DOIS retourner AU MOINS ${data.nombreResultats} entreprises FABRICANTES qualifi√©es. Si n√©cessaire, √©largis la recherche g√©ographiquement ou sectoriellement.

**CONTRAINTES STRICTES √Ä RESPECTER:**

**Secteur d'activit√© PRINCIPAL:** ${secteurPrincipal}
${allSectors.length > 1 ? `**Secteurs additionnels autoris√©s:** ${allSectors.slice(1).join(', ')}` : ''}
- Focus prioritaire sur les FABRICANTS du secteur "${secteurPrincipal}"
- SI INSUFFISANT: inclure secteurs connexes compatibles avec les produits CGR
- Entreprises qui con√ßoivent ET fabriquent des produits dans ces secteurs
- Avec usines de production identifi√©es et localis√©es

**Zone g√©ographique PRIORITAIRE:** ${zoneGeo}
- Recherche prioritaire dans ces zones
- SI INSUFFISANT pour atteindre ${data.nombreResultats} entreprises: √©largir aux zones adjacentes
- Proximit√© avec les usines CGR: ${usinesCGR.join(', ')} (avantage mais pas obligatoire)

**Taille d'entreprise PR√âF√âR√âE:** ${tailleEntreprise}
${this.getTailleEntrepriseGuidance(tailleEntreprise)}
- SI INSUFFISANT: inclure toutes tailles de FABRICANTS qualifi√©s

**Produits CGR AUTORIS√âS (AUCUN AUTRE):** ${produitsCGRSpecifiques.join(', ')}
‚ö†Ô∏è CRITIQUE: Ne proposer QUE ces produits dans "produits_cgr_a_proposer"



**Mots-cl√©s sp√©cifiques:** ${motsCles}
- Utiliser pour affiner la recherche
- Identifier les besoins correspondants

**Exclusions absolues:** ${excludeClients.join(', ')}
- √âviter ces entreprises et leurs filiales
- Exclure les concurrents directs CGR

**STRAT√âGIE DE RECHERCHE EN CASCADES:**

**√âTAPE 1 - RECHERCHE PRINCIPALE:**
Secteur: "${secteurPrincipal}" + Zone: "${zoneGeo}" + Taille: "${tailleEntreprise}"
Objectif: Minimum ${Math.ceil(data.nombreResultats * 0.7)} entreprises

**√âTAPE 2 - SI INSUFFISANT, RECHERCHE √âLARGIE:**
- Secteurs connexes dans la m√™me zone
- M√™me secteur dans zones adjacentes  
- Tailles d'entreprises diff√©rentes
Objectif: Compl√©ter √† ${data.nombreResultats} entreprises

**√âTAPE 3 - SI ENCORE INSUFFISANT, RECHERCHE EXTENSIVE:**
- Sous-secteurs sp√©cialis√©s
- Zones g√©ographiques plus larges (Europe, international)
- Entreprises √©mergentes ou innovantes
Objectif: ATTEINDRE IMP√âRATIVEMENT ${data.nombreResultats} entreprises

**FOCUS FABRICANTS - RECHERCHE MULTI-SOURCES OBLIGATOIRE:**

Pour CHAQUE entreprise potentielle, rechercher dans:
1. **Annuaires industriels**: KOMPASS, EUROPAGES, KELLYSEARCH
2. **Registres officiels**: Societe.com, Verif.com, Companies House
3. **Sites web**: Section "Nos usines", "Production", "Qui sommes-nous"
4. **LinkedIn**: Pages entreprise avec informations manufacturing
5. **Salons professionnels**: Exposants et participants manufacturiers

**VALIDATION ANTI-REVENDEUR RENFORC√âE:**
Avant d'inclure une entreprise, CONFIRMER:
- Poss√®de des USINES DE PRODUCTION identifi√©es (adresses exactes)
- FABRIQUE ses propres produits (liste pr√©cise)
- A des activit√©s R&D/conception (preuves)
- Volume de production compatible
- N'est PAS distributeur/installateur/revendeur

**INFORMATIONS REQUISES PAR ENTREPRISE:**
- Nom officiel complet et site web
- Description d√©taill√©e de l'activit√© de fabrication
- Localisation pr√©cise des usines de production
- Produits manufactur√©s n√©cessitant des composants m√©caniques
- Structure groupe complet (maison-m√®re, filiales)
- Potentiel r√©aliste d'utilisation des produits CGR
- Estimation fournisseurs actuels avec justification
- Sources multiples et r√©centes (minimum 3 par entreprise)

**ARGUMENTAIRE OBLIGATOIRE (minimum 250 mots par entreprise):**
1. Identit√© compl√®te (nom, groupe, structure)
2. Usines de production (localisation exacte, capacit√©s)
3. Produits fabriqu√©s (gamme d√©taill√©e par usine)
4. Besoins en composants CGR (volumes, sp√©cifications)
5. March√© et clients (secteurs servis, positionnement)
6. Fournisseurs actuels (estimation et justification)
7. Potentiel de collaboration (opportunit√©s, volumes)

**VALIDATION FINALE IMP√âRATIVE:**
‚úÖ EXACTEMENT ${data.nombreResultats} entreprises FABRICANTES minimum
‚úÖ Chaque entreprise avec usines de production localis√©es
‚úÖ Argumentaire d√©taill√© minimum 250 mots par entreprise
‚úÖ Sources multiples et v√©rifiables (minimum 3 par entreprise)
‚úÖ Aucun concurrent direct CGR exclu
‚úÖ Produits CGR propos√©s limit√©s √†: ${produitsCGRSpecifiques.join(', ')}
‚úÖ Potentiel r√©aliste et document√© pour chaque prospect

Si tu ne peux pas atteindre ${data.nombreResultats} entreprises avec les crit√®res stricts, √âLARGIS progressivement mais MAINTIENS la qualit√© de fabricant.

RETOURNE UNIQUEMENT LE JSON DEMAND√â avec ${data.nombreResultats} entreprises minimum.`;
  }

  // Handle <think> tags in deep research responses
  private parseEnterpriseResponse(response: any): { enterprises: Enterprise[], total: number, success: boolean, error?: string } {
    try {
      let content = response.choices[0]?.message?.content || '';
      console.log('üìÑ Contenu re√ßu (premiers 500 chars):', content.substring(0, 500) + '...');
      
      // ADDED: Handle <think> tags from sonar-deep-research
      if (content.includes('<think>')) {
        console.log('üß† Detected <think> tags, extracting JSON after thinking process...');
        const thinkEndIndex = content.lastIndexOf('</think>');
        if (thinkEndIndex !== -1) {
          content = content.substring(thinkEndIndex + 8).trim();
          console.log('üìÑ Content after removing <think> tags:', content.substring(0, 300) + '...');
        }
      }
      
      // Multiple strategies to extract JSON
      let jsonStr = this.extractJsonFromContent(content);
      let parsed: any;
      
      // Try direct parsing first
      try {
        parsed = JSON.parse(jsonStr);
        console.log('‚úÖ Parsing direct r√©ussi');
      } catch (error) {
        console.log('‚ö†Ô∏è Parsing direct √©chou√©, tentative de r√©paration...');
        
        // Try repair and parse
        jsonStr = this.repairJsonString(jsonStr);
        try {
          parsed = JSON.parse(jsonStr);
          console.log('‚úÖ Parsing avec r√©paration r√©ussi');
        } catch (error2) {
          console.log('‚ö†Ô∏è Parsing avec r√©paration √©chou√©, tentative de parsing manuel...');
          
          // Manual parsing as last resort
          const manualResults = this.manualParseEnterprises(content);
          if (manualResults.length > 0) {
            console.log('‚úÖ Parsing manuel r√©ussi');
            return {
              enterprises: manualResults,
              total: manualResults.length,
              success: true
            };
          }
          
          throw new Error(`Impossible de parser le JSON: ${error2}`);
        }
      }
      
      // Validate structure
      if (!parsed || !Array.isArray(parsed.enterprises)) {
        console.error('‚ùå Structure JSON invalide:', parsed);
        return { enterprises: [], total: 0, success: false, error: 'Structure JSON invalide' };
      }

      // Clean and validate enterprises
      const cleanedEnterprises = this.validateAndCleanEnterprises(parsed.enterprises);
      
      console.log(`‚úÖ ${cleanedEnterprises.length} entreprises pars√©es avec succ√®s`);
      return {
        enterprises: cleanedEnterprises,
        total: cleanedEnterprises.length,
        success: true
      };
      
    } catch (error: any) {
      console.error('‚ùå Erreur parsing finale:', error.message);
      console.error('‚ùå Contenu brut:', response.choices[0]?.message?.content?.substring(0, 1000));
      
      return { 
        enterprises: [], 
        total: 0, 
        success: false, 
        error: `Erreur parsing: ${error.message}` 
      };
    }
  }

  // Rest of the methods remain the same...
  private extractJsonFromContent(content: string): string {
    // Remove any text before and after JSON
    let jsonStr = content.trim();
    
    // Remove markdown code blocks
    jsonStr = jsonStr.replace(/```json\n?/g, '').replace(/\n?```$/g, '');
    jsonStr = jsonStr.replace(/```\n?/g, '').replace(/\n?```$/g, '');
    
    // Find JSON boundaries
    const jsonMatch = jsonStr.match(/\{[\s\S]*"enterprises"[\s\S]*\[[\s\S]*?\][\s\S]*?\}/);
    if (jsonMatch) {
      return jsonMatch[0];
    }
    
    // Alternative: find by braces
    const firstBrace = jsonStr.indexOf('{');
    const lastBrace = jsonStr.lastIndexOf('}');
    
    if (firstBrace !== -1 && lastBrace !== -1 && lastBrace > firstBrace) {
      return jsonStr.substring(firstBrace, lastBrace + 1);
    }
    
    return jsonStr;
  }

  // Keep all other existing methods unchanged...
  private getTailleEntrepriseGuidance(taille: string): string {
    switch (taille) {
      case 'PME':
        return `- Cibler prioritairement des PME FABRICANTES (50-250 salari√©s)
- Si insuffisant: inclure ETI avec production similaire
- Avec usines de production propres
- Entreprises avec besoins sp√©cifiques et flexibilit√©`;
      
      case 'ETI':
        return `- Cibler prioritairement des ETI FABRICANTES (250-5000 salari√©s)
- Si insuffisant: inclure PME et grandes entreprises
- Avec plusieurs sites de production possibles
- Volumes moyens √† importants`;
      
      case 'Grande entreprise':
        return `- Cibler prioritairement des grandes entreprises FABRICANTES (5000+ salari√©s)
- Si insuffisant: inclure ETI avec volumes importants
- Avec multiples usines de production
- Volumes importants et contrats long terme`;
      
      default:
        return `- Toutes tailles d'entreprises FABRICANTES accept√©es
- Adapter l'approche selon la taille
- Priorit√© aux entreprises avec volumes compatibles`;
    }
  }

  // Keep all remaining methods unchanged (getSpecificSectorGuidance, getSectorSpecificSearchStrategy, etc.)
  private getSpecificSectorGuidance(secteur: string): string {
    const secteurLower = secteur.toLowerCase();
    
    if (secteurLower.includes('immobil') || secteurLower.includes('real estate') || secteurLower.includes('b√¢timent') || secteurLower.includes('construction')) {
      return `Pour le secteur IMMOBILIER/CONSTRUCTION, rechercher des FABRICANTS de:
‚Ä¢ Syst√®mes de fermeture (portes, fen√™tres, volets) avec usines identifi√©es
‚Ä¢ √âquipements de s√©curit√© pour b√¢timents (contr√¥le d'acc√®s, alarmes)
‚Ä¢ Syst√®mes d'ouverture automatique (portes automatiques, portails)
‚Ä¢ √âquipements de confort (climatisation, ventilation, chauffage)
‚Ä¢ Mobilier urbain et √©quipements publics
‚Ä¢ Syst√®mes d'ascenseurs et monte-charges
‚Ä¢ √âquipements de parking automatis√©s
‚Ä¢ Syst√®mes de stores et protection solaire

√âVITER: Promoteurs immobiliers, agences immobili√®res, bureaux d'architecture, installateurs`;
    }
    
    return `Pour le secteur "${secteur}", rechercher des FABRICANTS avec:
‚Ä¢ Usines de production identifi√©es et localis√©es
‚Ä¢ Produits manufactur√©s int√©grant des composants m√©caniques
‚Ä¢ Activit√©s de conception et d√©veloppement
‚Ä¢ Capacit√©s industrielles adapt√©es aux volumes requis
‚Ä¢ Structure organisationnelle avec R&D et production
‚Ä¢ March√©s cibles n√©cessitant des composants de pr√©cision`;
  }

  private getSectorSpecificSearchStrategy(secteur: string, produitsCGR: string[]): string {
    // Keep existing implementation
    const produitsStr = produitsCGR.join(', ');
    const secteurLower = secteur.toLowerCase();
    
    if (secteurLower.includes('immobil') || secteurLower.includes('real estate') || secteurLower.includes('b√¢timent') || secteurLower.includes('construction')) {
      return `SECTEUR IMMOBILIER/CONSTRUCTION - Rechercher des FABRICANTS avec usines de:
‚Ä¢ Syst√®mes de fermeture (avec sites production) int√©grant des ${produitsStr}
‚Ä¢ √âquipements de s√©curit√© b√¢timent con√ßus et fabriqu√©s avec m√©canismes pr√©cis
‚Ä¢ Portes et fen√™tres automatiques avec usines identifi√©es
‚Ä¢ Syst√®mes d'ascenseurs et monte-charges avec composants m√©caniques
‚Ä¢ √âquipements HVAC avec sites de fabrication et assemblages
‚Ä¢ Mobilier urbain sp√©cialis√© avec activit√©s de production
‚Ä¢ Syst√®mes de stores et protection solaire fabriqu√©s
‚Ä¢ √âquipements de parking automatis√©s avec usines propres

√âVITER: Promoteurs immobiliers, agences, architectes, installateurs √©quipements`;
    }
    
    switch (secteurLower) {
      case 'm√©dical':
        return `SECTEUR M√âDICAL - Rechercher des FABRICANTS avec usines de:
‚Ä¢ Dispositifs m√©dicaux (avec localisation usines) int√©grant des ${produitsStr}
‚Ä¢ √âquipements hospitaliers (conception + production) avec m√©canismes pr√©cis
‚Ä¢ Instruments chirurgicaux fabriqu√©s (pas distribu√©s) n√©cessitant des composants ressort
‚Ä¢ Appareils de diagnostic avec usines identifi√©es et syst√®mes m√©caniques
‚Ä¢ Proth√®ses et orth√®ses avec sites de fabrication et m√©canismes de pr√©cision
‚Ä¢ Mat√©riel de r√©√©ducation con√ßu et fabriqu√© avec composants m√©caniques

√âVITER: Distributeurs mat√©riel m√©dical, installateurs √©quipements hospitaliers`;
        
      case 'a√©ronautique':
        return `SECTEUR A√âRONAUTIQUE - Rechercher des FABRICANTS avec usines de:
‚Ä¢ Composants d'a√©ronefs fabriqu√©s (avec sites production) n√©cessitant des ${produitsStr}
‚Ä¢ √âquipements de cabine con√ßus et produits avec m√©canismes pr√©cis
‚Ä¢ Syst√®mes de navigation avec usines identifi√©es int√©grant des composants m√©caniques
‚Ä¢ √âquipements de s√©curit√© a√©ronautique fabriqu√©s (pas distribu√©s)
‚Ä¢ Outillage a√©ronautique sp√©cialis√© avec sites de production
‚Ä¢ Composants satellites et drones avec activit√©s conception/fabrication

√âVITER: Distributeurs a√©ronautiques, sous-traitants sans produits finis`;
        
      case 'automobile':
        return `SECTEUR AUTOMOBILE - Rechercher des FABRICANTS avec usines de:
‚Ä¢ √âquipementiers automobiles (avec usines identifi√©es) int√©grant des ${produitsStr}
‚Ä¢ Composants d'habitacle fabriqu√©s avec m√©canismes pr√©cis
‚Ä¢ √âquipements √©lectriques automobile avec sites de production
‚Ä¢ Accessoires et √©quipements de confort con√ßus et fabriqu√©s
‚Ä¢ Syst√®mes sp√©cialis√©s (hors grands constructeurs) avec usines propres
‚Ä¢ Outillage automobile sp√©cialis√© avec activit√©s de fabrication

√âVITER: Distributeurs pi√®ces auto, garage, installateurs √©quipements`;
        
      case '√©nergie':
        return `SECTEUR √âNERGIE - Rechercher des FABRICANTS avec usines de:
‚Ä¢ √âquipements √©oliens fabriqu√©s (avec sites production) n√©cessitant des ${produitsStr}
‚Ä¢ Syst√®mes solaires avec usines identifi√©es et composants m√©caniques
‚Ä¢ √âquipements de stockage d'√©nergie con√ßus et fabriqu√©s
‚Ä¢ Installations de production d'√©nergie avec activit√©s fabrication
‚Ä¢ Syst√®mes de distribution √©nerg√©tique avec usines propres
‚Ä¢ √âquipements de mesure et contr√¥le √©nerg√©tique fabriqu√©s

√âVITER: Installateurs √©olien/solaire, distributeurs √©quipements √©nergie`;
        
      case 'd√©fense':
        return `SECTEUR D√âFENSE - Rechercher des FABRICANTS avec usines de:
‚Ä¢ √âquipements militaires fabriqu√©s (avec sites production) int√©grant des ${produitsStr}
‚Ä¢ Syst√®mes d'armes avec usines identifi√©es et m√©canismes pr√©cis
‚Ä¢ V√©hicules blind√©s et composants avec activit√©s de fabrication
‚Ä¢ √âquipements de communication militaire con√ßus et fabriqu√©s
‚Ä¢ Syst√®mes de protection et s√©curit√© avec usines propres
‚Ä¢ Mat√©riel d'entra√Ænement militaire avec sites de production

√âVITER: Distributeurs mat√©riel militaire, int√©grateurs syst√®mes`;
        
      default:
        return `SECTEUR "${secteur.toUpperCase()}" - Rechercher des FABRICANTS avec usines de:
‚Ä¢ √âquipements sp√©cialis√©s fabriqu√©s (avec sites production) n√©cessitant des ${produitsStr}
‚Ä¢ Machines et syst√®mes avec usines identifi√©es et m√©canismes pr√©cis
‚Ä¢ Produits manufactur√©s int√©grant des composants m√©caniques
‚Ä¢ Outillage sp√©cialis√© avec activit√©s de fabrication
‚Ä¢ √âquipements de mesure et contr√¥le avec usines propres
‚Ä¢ Syst√®mes automatis√©s avec sites de production

√âVITER: Distributeurs, revendeurs, installateurs, int√©grateurs`;
    }
  }

  private repairJsonString(jsonStr: string): string {
    let repaired = jsonStr;
    
    // Remove trailing commas
    repaired = repaired.replace(/,(\s*[}\]])/g, '$1');
    
    // Fix unescaped quotes in strings
    repaired = repaired.replace(/"([^"]*)"([^"]*)"([^"]*)":/g, '"$1\\"$2\\"$3":');
    
    // Normalize whitespace
    repaired = repaired.replace(/\s+/g, ' ');
    
    // Fix missing commas between objects
    repaired = repaired.replace(/}\s*{/g, '},{');
    
    // Fix missing commas between array elements
    repaired = repaired.replace(/]\s*\[/g, '],[');
    
    // Ensure proper string quotes for values
    repaired = repaired.replace(/:\s*([^",\[\]{}]+)(\s*[,}\]])/g, (match, value, suffix) => {
      const trimmedValue = value.trim();
      if (trimmedValue === 'true' || trimmedValue === 'false' || trimmedValue === 'null' || !isNaN(Number(trimmedValue))) {
        return `: ${trimmedValue}${suffix}`;
      }
      return `: "${trimmedValue}"${suffix}`;
    });
    
    return repaired;
  }

  private manualParseEnterprises(content: string): Enterprise[] {
    const enterprises: Enterprise[] = [];
    
    // Enhanced regex patterns for enterprise parsing
    const enterprisePatterns = [
      // Complete enterprise object
      /\{\s*"nom_entreprise"\s*:\s*"([^"]+)"[\s\S]*?"site_web"\s*:\s*"([^"]*)"[\s\S]*?"description_activite"\s*:\s*"([^"]+)"[\s\S]*?"produits_entreprise"\s*:\s*\[([^\]]*)\][\s\S]*?"potentiel_cgr"\s*:\s*\{[\s\S]*?"produits_cibles_chez_le_prospect"\s*:\s*\[([^\]]*)\][\s\S]*?"produits_cgr_a_proposer"\s*:\s*\[([^\]]*)\][\s\S]*?"argumentaire_approche"\s*:\s*"([^"]+)"[\s\S]*?\}[\s\S]*?"fournisseur_actuel_estimation"\s*:\s*"([^"]*)"[\s\S]*?"sources"\s*:\s*\[([^\]]*)\][\s\S]*?\}/g
    ];
    
    for (const pattern of enterprisePatterns) {
      let match;
      while ((match = pattern.exec(content)) !== null && enterprises.length < 15) {
        try {
          const [, nom_entreprise, site_web, description_activite, produits_str, cibles_str, cgr_str, argumentaire, fournisseur, sources_str] = match;
          
          if (nom_entreprise && description_activite) {
            enterprises.push({
              nom_entreprise: nom_entreprise.trim(),
              site_web: this.cleanWebsiteUrl(site_web || ''),
              description_activite: description_activite.trim(),
              produits_entreprise: this.parseArrayString(produits_str),
              potentiel_cgr: {
                produits_cibles_chez_le_prospect: this.parseArrayString(cibles_str),
                produits_cgr_a_proposer: this.parseArrayString(cgr_str),
                argumentaire_approche: argumentaire?.trim() || ''
              },
              fournisseur_actuel_estimation: fournisseur?.trim() || 'Non sp√©cifi√©',
              sources: this.parseArrayString(sources_str),
              taille_entreprise: 'Non sp√©cifi√©',
              volume_pieces_estime: 'Non sp√©cifi√©',
              zone_geographique: 'Non sp√©cifi√©'
            });
          }
        } catch (error) {
          console.error('‚ùå Erreur parsing manuel pour une entreprise:', error);
        }
      }
    }
    
    return enterprises;
  }

  private parseArrayString(arrayStr: string): string[] {
    if (!arrayStr || arrayStr.trim() === '') return [];
    
    return arrayStr
      .split(',')
      .map(item => item.trim().replace(/^["']|["']$/g, ''))
      .filter(item => item.length > 0 && item !== 'null' && item !== 'undefined');
  }

  private validateAndCleanEnterprises(enterprises: any[]): Enterprise[] {
    return enterprises
      .filter(enterprise => {
        // Basic validation
        if (!enterprise || typeof enterprise !== 'object') return false;
        if (!enterprise.nom_entreprise || typeof enterprise.nom_entreprise !== 'string') return false;
        if (!enterprise.description_activite || typeof enterprise.description_activite !== 'string') return false;
        if (!enterprise.potentiel_cgr || typeof enterprise.potentiel_cgr !== 'object') return false;
        
        return true;
      })
      .map(enterprise => ({
        nom_entreprise: String(enterprise.nom_entreprise).trim(),
        site_web: this.cleanWebsiteUrl(enterprise.site_web || ''),
        description_activite: String(enterprise.description_activite).trim(),
        produits_entreprise: Array.isArray(enterprise.produits_entreprise) 
          ? enterprise.produits_entreprise.filter((p: any) => p && typeof p === 'string').map((p: any) => String(p).trim())
          : [],
        potentiel_cgr: {
          produits_cibles_chez_le_prospect: Array.isArray(enterprise.potentiel_cgr?.produits_cibles_chez_le_prospect) 
            ? enterprise.potentiel_cgr.produits_cibles_chez_le_prospect.filter((p: any) => p && typeof p === 'string').map((p: any) => String(p).trim())
            : [],
          produits_cgr_a_proposer: Array.isArray(enterprise.potentiel_cgr?.produits_cgr_a_proposer) 
            ? enterprise.potentiel_cgr.produits_cgr_a_proposer.filter((p: any) => p && typeof p === 'string').map((p: any) => String(p).trim())
            : [],
          argumentaire_approche: String(enterprise.potentiel_cgr?.argumentaire_approche || '').trim()
        },
        fournisseur_actuel_estimation: String(enterprise.fournisseur_actuel_estimation || 'Non sp√©cifi√©').trim(),
        sources: Array.isArray(enterprise.sources) 
          ? enterprise.sources.filter((s: any) => s && typeof s === 'string').map((s: any) => String(s).trim())
          : [],
        taille_entreprise: String(enterprise.taille_entreprise || 'Non sp√©cifi√©').trim(),
        volume_pieces_estime: String(enterprise.volume_pieces_estime || 'Non sp√©cifi√©').trim(),
        zone_geographique: String(enterprise.zone_geographique || 'Non sp√©cifi√©').trim()
      }))
      .slice(0, 15); // Increased limit to 15 enterprises
  }

  private cleanWebsiteUrl(url: string): string {
    if (!url || url.trim() === '') return '';
    
    let cleanedUrl = url.trim();
    if (!cleanedUrl.startsWith('http://') && !cleanedUrl.startsWith('https://')) {
      if (cleanedUrl.includes('.') && !cleanedUrl.includes(' ')) {
        cleanedUrl = `https://${cleanedUrl}`;
      } else {
        return '';
      }
    }
    
    try {
      new URL(cleanedUrl);
      return cleanedUrl;
    } catch (error) {
      return '';
    }
  }
}