// lib/perplexity.ts - VERSION ULTRA-ROBUSTE - Gestion multi-langue compl√®te
import axios from 'axios';

interface Enterprise {
  nom_entreprise: string;
  site_web: string;
  description_activite: string;
  produits_entreprise: string[];
  potentiel_cgr: {
    produits_cibles_chez_le_prospect: string[];
    produits_cgr_a_proposer: string[];
    argumentaire_approche: string;
  };
  fournisseur_actuel_estimation: string;
  sources: string[];
  taille_entreprise: string;
  volume_pieces_estime: string;
  zone_geographique: string;
}

interface EnterpriseSearchData {
  secteursActivite: string[];
  zoneGeographique: string[];
  tailleEntreprise: string;
  motsCles: string;
  produitsCGR: string[];
  clientsExclure: string;
  usinesCGR: string[];
  nombreResultats: number;
  typeRecherche?: string;
  secteurActiviteLibre?: string;
  zoneGeographiqueLibre?: string;
  autresProduits?: string;
}

export class PerplexityEnterpriseClient {
  private apiKey: string;
  private baseUrl = 'https://api.perplexity.ai';
  private maxRetries = 3;

  constructor() {
    this.apiKey = process.env.PERPLEXITY_API_KEY!;
    if (!this.apiKey) {
      throw new Error('PERPLEXITY_API_KEY manquante');
    }
  }

  /**
   * üéØ Point d'entr√©e principal - Recherche d'entreprises avec retry logic
   */
  async searchEnterprises(searchData: EnterpriseSearchData): Promise<any> {
    const prompt = this.buildEnterpriseSearchPrompt(searchData);
    let lastError: Error | null = null;
    
    for (let attempt = 1; attempt <= this.maxRetries; attempt++) {
      try {
        console.log(`Tentative ${attempt}/${this.maxRetries} - Recherche Perplexity...`);
        
        const allSectors = [
          ...(searchData.secteursActivite || []),
          ...(searchData.secteurActiviteLibre ? [searchData.secteurActiviteLibre] : [])
        ].filter(Boolean);
        
        const allZones = [
          ...(searchData.zoneGeographique || []),
          ...(searchData.zoneGeographiqueLibre ? [searchData.zoneGeographiqueLibre] : [])
        ].filter(Boolean);
        
        console.log('Param√®tres:', {
          secteur: allSectors[0] || 'Non sp√©cifi√©',
          zone: allZones.join(', '),
          r√©sultats: searchData.nombreResultats
        });
        
        const response = await axios.post(
          `${this.baseUrl}/chat/completions`,
          {
            model: 'sonar',
            messages: [
              { role: 'system', content: this.getSystemPrompt() },
              { role: 'user', content: prompt }
            ],
            max_tokens: 8000,
            temperature: 0.1,
            search_recency_filter: 'month',
            search_domain_filter: [
              'linkedin.com', 
              'companieshouse.gov.uk', 
              'societe.com', 
              'verif.com',
              'kompass.com',
              'europages.com',
              'kellysearch.com',
              'infogreffe.fr',
              'northdata.com',
              'companiesintheuk.co.uk'
            ]
          },
          {
            headers: {
              'Authorization': `Bearer ${this.apiKey}`,
              'Content-Type': 'application/json'
            },
            timeout: 900000,
            validateStatus: (status) => status < 500
          }
        );
        
        if (response.status >= 400) {
          throw new Error(`API Error ${response.status}: ${JSON.stringify(response.data)}`);
        }
        
        console.log('R√©ponse Perplexity re√ßue');
        const result = this.parseEnterpriseResponse(response.data, searchData);
        
        if (result.success && result.enterprises.length > 0) {
          console.log(`‚úì Succ√®s: ${result.enterprises.length} entreprises`);
          return result;
        }
        
        if (result.success) {
          return result;
        }
        
        throw new Error(result.error || 'Parsing failed');
        
      } catch (error: any) {
        lastError = error;
        console.error(`‚úó Tentative ${attempt} √©chou√©e:`, error.message);
        
        if (error.response?.status === 400 || error.response?.status === 401) {
          break;
        }
        
        if (attempt < this.maxRetries) {
          const delay = Math.min(1000 * Math.pow(2, attempt), 10000);
          console.log(`‚è≥ Nouvelle tentative dans ${delay}ms...`);
          await new Promise(resolve => setTimeout(resolve, delay));
        }
      }
    }
    
    console.error('‚úó Toutes les tentatives ont √©chou√©');
    return {
      enterprises: [],
      total: 0,
      success: false,
      error: lastError?.message || '√âchec apr√®s plusieurs tentatives'
    };
  }

  /**
   * üîß PARSING JSON ULTRA-ROBUSTE avec gestion multi-langue
   */
  private parseEnterpriseResponse(
    response: any, 
    searchData: EnterpriseSearchData
  ): { 
    enterprises: Enterprise[], 
    total: number, 
    success: boolean, 
    error?: string 
  } {
    try {
      let content = response.choices?.[0]?.message?.content || '';
      
      if (!content) {
        console.error('‚úó Contenu vide re√ßu de Perplexity');
        return this.createEmptyResponse('Aucun contenu re√ßu');
      }
      
      console.log(`üìÑ Contenu re√ßu: ${content.length} caract√®res`);
      
      // √âtape 1: Nettoyage du markdown et tags
      content = this.cleanMarkdownAndTags(content);
      
      // √âtape 2: Extraction du JSON
      content = this.extractJSONContent(content);
      
      if (!content) {
        console.error('‚úó Impossible d\'extraire le JSON');
        return this.extractPartialEnterprises(response.choices?.[0]?.message?.content || '', searchData);
      }
      
      console.log(`üìä JSON extrait: ${content.length} caract√®res`);
      
      // √âtape 3: Validation et r√©paration de la structure
      const validation = this.validateJSONStructure(content);
      if (!validation.valid) {
        console.warn('‚ö†Ô∏è Structure JSON invalide:', validation.error);
        content = this.repairJSONStructure(content);
        console.log('üîß JSON r√©par√©');
      } else {
        console.log('‚úì Structure JSON valide');
      }
      
      // √âtape 4: Nettoyage des caract√®res probl√©matiques
      content = this.cleanJSONString(content);
      
      // √âtape 5: Parsing avec gestion d'erreur avanc√©e
      let parsed: any;
      try {
        parsed = JSON.parse(content);
        console.log('‚úì Parsing JSON r√©ussi');
      } catch (error: any) {
        console.error('‚úó Parsing √©chou√©:', error.message);
        
        // Tentative de r√©paration avanc√©e
        content = this.advancedJSONRepair(content);
        
        try {
          parsed = JSON.parse(content);
          console.log('‚úì Parsing r√©ussi apr√®s r√©paration avanc√©e');
        } catch (error2: any) {
          console.error('‚úó Parsing √©chou√© d√©finitivement:', error2.message);
          return this.extractPartialEnterprises(response.choices?.[0]?.message?.content || '', searchData);
        }
      }
      
      // üéØ NORMALISATION AUTOMATIQUE DES CL√âS RACINE
      parsed = this.normalizeRootKeys(parsed);
      
      // √âtape 6: Validation et nettoyage des entreprises
      if (!parsed || typeof parsed !== 'object') {
        console.error('‚úó R√©sultat pars√© n\'est pas un objet');
        return this.extractPartialEnterprises(content, searchData);
      }
      
      if (!Array.isArray(parsed.enterprises)) {
        console.error('‚úó enterprises n\'est pas un tableau');
        console.log('üìã Cl√©s disponibles:', Object.keys(parsed));
        return this.extractPartialEnterprises(content, searchData);
      }
      
      const cleanedEnterprises = this.validateAndCleanEnterprises(parsed.enterprises, searchData);
      console.log(`‚úì ${cleanedEnterprises.length} entreprises valides extraites`);
      
      return {
        enterprises: cleanedEnterprises,
        total: cleanedEnterprises.length,
        success: true
      };
      
    } catch (error: any) {
      console.error('‚úó Erreur parsing finale:', error.message);
      return this.createEmptyResponse(error.message);
    }
  }

  /**
   * üîÑ Normalisation automatique de TOUTES les variations de cl√©s racine
   */
  private normalizeRootKeys(parsed: any): any {
    // Liste exhaustive des variations possibles
    const enterpriseKeys = [
      'enterprises',      // Anglais (attendu)
      'entreprises',      // Fran√ßais pluriel
      'entreprise',       // Fran√ßais singulier
      'companies',        // Anglais alternatif
      'company',          // Anglais singulier
      'results',          // R√©sultats
      'data'             // Donn√©es
    ];
    
    // Chercher la cl√© qui contient les donn√©es
    for (const key of enterpriseKeys) {
      if (parsed[key]) {
        console.log(`üîÑ Normalisation: "${key}" ‚Üí "enterprises"`);
        
        // Convertir en tableau si n√©cessaire
        let data = parsed[key];
        if (!Array.isArray(data)) {
          data = [data];
          console.log('üîÑ Conversion en tableau');
        }
        
        parsed.enterprises = data;
        
        // Supprimer l'ancienne cl√© si diff√©rente
        if (key !== 'enterprises') {
          delete parsed[key];
        }
        
        break;
      }
    }
    
    return parsed;
  }

  /**
   * Nettoyage du markdown et des balises
   */
  private cleanMarkdownAndTags(content: string): string {
    return content
      .replace(/<think>[\s\S]*?<\/think>/g, '')
      .replace(/```json\s*/g, '')
      .replace(/```\s*/g, '')
      .trim();
  }

  /**
   * Extraction du contenu JSON valide entre { et }
   */
  private extractJSONContent(content: string): string {
    const firstBrace = content.indexOf('{');
    const lastBrace = content.lastIndexOf('}');
    
    if (firstBrace === -1 || lastBrace === -1 || firstBrace >= lastBrace) {
      console.error('‚úó Pas de JSON valide trouv√©');
      return '';
    }
    
    return content.substring(firstBrace, lastBrace + 1);
  }

  /**
   * Validation de la structure JSON (accolades et crochets appari√©s)
   */
  private validateJSONStructure(str: string): { valid: boolean; error?: string } {
    let openBraces = 0, closeBraces = 0;
    let openBrackets = 0, closeBrackets = 0;
    let inString = false;
    let escaped = false;
    
    for (let i = 0; i < str.length; i++) {
      const char = str[i];
      
      if (escaped) {
        escaped = false;
        continue;
      }
      
      if (char === '\\') {
        escaped = true;
        continue;
      }
      
      if (char === '"') {
        inString = !inString;
        continue;
      }
      
      if (inString) continue;
      
      if (char === '{') openBraces++;
      if (char === '}') closeBraces++;
      if (char === '[') openBrackets++;
      if (char === ']') closeBrackets++;
    }
    
    if (openBraces !== closeBraces) {
      return { 
        valid: false, 
        error: `Accolades non appari√©es: ${openBraces} ouvertes, ${closeBraces} ferm√©es` 
      };
    }
    
    if (openBrackets !== closeBrackets) {
      return { 
        valid: false, 
        error: `Crochets non appari√©s: ${openBrackets} ouverts, ${closeBrackets} ferm√©s` 
      };
    }
    
    return { valid: true };
  }

  /**
   * R√©paration automatique de la structure JSON
   */
  private repairJSONStructure(str: string): string {
    let repaired = str;
    
    const openBraces = (str.match(/{/g) || []).length;
    const closeBraces = (str.match(/}/g) || []).length;
    const openBrackets = (str.match(/\[/g) || []).length;
    const closeBrackets = (str.match(/\]/g) || []).length;
    
    if (openBrackets > closeBrackets) {
      const missing = openBrackets - closeBrackets;
      console.log(`üîß Ajout de ${missing} crochets fermants`);
      repaired += ']'.repeat(missing);
    }
    
    if (openBraces > closeBraces) {
      const missing = openBraces - closeBraces;
      console.log(`üîß Ajout de ${missing} accolades fermantes`);
      repaired += '}'.repeat(missing);
    }
    
    return repaired;
  }

  /**
   * Nettoyage des caract√®res probl√©matiques
   */
  private cleanJSONString(str: string): string {
    return str
      .replace(/[\u0000-\u001F\u007F-\u009F]/g, '')
      .replace(/\r\n/g, ' ')
      .replace(/\n/g, ' ')
      .replace(/\t/g, ' ')
      .replace(/[""]/g, '"')
      .replace(/['']/g, "'")
      .replace(/\s+/g, ' ')
      .trim();
  }

  /**
   * R√©paration JSON avanc√©e - VERSION AM√âLIOR√âE
   */
  private advancedJSONRepair(str: string): string {
    let repaired = str;
    
    // 1. Virgules avant fermetures
    repaired = repaired.replace(/,(\s*[}\]])/g, '$1');
    
    // 2. Objets cons√©cutifs
    repaired = repaired.replace(/}(\s*){/g, '},{');
    
    // 3. Tableaux cons√©cutifs
    repaired = repaired.replace(/](\s*)\[/g, '],[');
    
    // 4. Propri√©t√©s sans guillemets
    repaired = repaired.replace(/(\{|,)(\s*)(\w+)(\s*):/g, '$1$2"$3"$4:');
    
    // 5. Virgules manquantes entre propri√©t√©s
    repaired = repaired.replace(/"(\s*)"(\w+)"(\s*):/g, '",$1"$2"$3:');
    
    // 6. Guillemets doubles √©chapp√©s
    repaired = repaired.replace(/\\"/g, '"');
    
    return repaired;
  }

  /**
   * Extraction partielle en cas d'√©chec du parsing complet
   */
  private extractPartialEnterprises(
    content: string,
    searchData: EnterpriseSearchData
  ): {
    enterprises: Enterprise[];
    total: number;
    success: boolean;
    error?: string;
  } {
    console.log('üîç Tentative d\'extraction partielle...');
    
    const enterprises: Enterprise[] = [];
    
    // Pattern √©largi pour capturer diff√©rentes variations
    const patterns = [
      /"nom_entreprise"\s*:\s*"([^"]+)"/g,
      /"nom"\s*:\s*"([^"]+)"/g,
      /"name"\s*:\s*"([^"]+)"/g,
      /"company_name"\s*:\s*"([^"]+)"/g
    ];
    
    const foundNames = new Set<string>();
    
    for (const pattern of patterns) {
      const matches = content.matchAll(pattern);
      for (const match of matches) {
        foundNames.add(match[1].trim());
      }
    }
    
    console.log(`üîç ${foundNames.size} noms d'entreprises d√©tect√©s`);
    
    for (const nom of Array.from(foundNames).slice(0, searchData.nombreResultats)) {
      enterprises.push(this.createMinimalEnterprise(nom, searchData));
    }
    
    if (enterprises.length > 0) {
      console.log(`‚úì Extraction partielle: ${enterprises.length} entreprises`);
      return {
        enterprises,
        total: enterprises.length,
        success: true
      };
    }
    
    console.error('‚úó √âchec extraction partielle');
    return this.createEmptyResponse('Impossible d\'extraire les donn√©es');
  }

  /**
   * Cr√©ation d'une entreprise minimale avec donn√©es par d√©faut
   */
  private createMinimalEnterprise(nom: string, searchData: EnterpriseSearchData): Enterprise {
    const zone = searchData.zoneGeographique?.[0] || 
                 searchData.zoneGeographiqueLibre || 
                 'France';
    
    const secteur = searchData.secteursActivite?.[0] || 
                    searchData.secteurActiviteLibre || 
                    'Industriel';
    
    return {
      nom_entreprise: nom,
      site_web: '',
      description_activite: `Entreprise du secteur ${secteur} bas√©e en ${zone}. Donn√©es compl√®tes √† valider manuellement.`,
      produits_entreprise: [],
      potentiel_cgr: {
        produits_cibles_chez_le_prospect: [],
        produits_cgr_a_proposer: ['Ressorts fil', 'Pi√®ces d√©coup√©es', 'Assemblages'],
        argumentaire_approche: `Entreprise identifi√©e dans le secteur ${secteur}. CGR International peut proposer ses solutions de ressorts fil, pi√®ces d√©coup√©es et assemblages m√©caniques. Notre expertise et notre proximit√© g√©ographique permettent un accompagnement r√©actif. Validation et analyse approfondie recommand√©es pour identifier les besoins pr√©cis de ${nom}.`
      },
      fournisseur_actuel_estimation: '√Ä identifier',
      sources: [],
      taille_entreprise: '√Ä d√©terminer',
      volume_pieces_estime: '√Ä estimer',
      zone_geographique: zone
    };
  }

  /**
   * Cr√©ation d'une r√©ponse vide avec erreur
   */
  private createEmptyResponse(error: string): {
    enterprises: Enterprise[];
    total: number;
    success: boolean;
    error: string;
  } {
    return {
      enterprises: [],
      total: 0,
      success: false,
      error
    };
  }

  /**
   * üéØ VALIDATION ET NETTOYAGE ULTRA-ROBUSTE avec normalisation multi-langue
   */
  private validateAndCleanEnterprises(
    enterprises: any[], 
    searchData: EnterpriseSearchData
  ): Enterprise[] {
    return enterprises
      .filter(e => e && typeof e === 'object')
      .map((enterprise, index) => {
        try {
          // üîÑ Normaliser TOUTES les cl√©s possibles
          const normalized = this.normalizeEnterpriseKeys(enterprise);
          
          const nom = String(normalized.nom_entreprise || '').trim();
          
          if (!nom) {
            console.warn(`‚ö†Ô∏è Entreprise ${index + 1}: nom manquant, ignor√©e`);
            return null;
          }
          
          // Construction de l'entreprise valid√©e
          const validated: Enterprise = {
            nom_entreprise: nom,
            site_web: this.cleanWebsiteUrl(normalized.site_web),
            description_activite: this.ensureMinimumLength(
              normalized.description_activite,
              50,
              `Entreprise ${nom} dans le secteur ${searchData.secteursActivite?.[0] || 'industriel'}.`
            ),
            produits_entreprise: this.ensureArray(normalized.produits_entreprise),
            potentiel_cgr: this.cleanPotentielCGR(normalized.potentiel_cgr, nom, searchData),
            fournisseur_actuel_estimation: normalized.fournisseur_actuel_estimation || '√Ä identifier',
            sources: this.ensureArray(normalized.sources),
            taille_entreprise: normalized.taille_entreprise || '√Ä d√©terminer',
            volume_pieces_estime: normalized.volume_pieces_estime || '√Ä estimer',
            zone_geographique: normalized.zone_geographique || 
                               searchData.zoneGeographique?.[0] || 
                               searchData.zoneGeographiqueLibre || 
                               'Non sp√©cifi√©e'
          };
          
          console.log(`‚úì Entreprise valid√©e: ${nom}`);
          return validated;
          
        } catch (err) {
          console.error(`‚úó Erreur validation entreprise ${index + 1}:`, err);
          return null;
        }
      })
      .filter((e): e is Enterprise => e !== null);
  }

  /**
   * üîÑ Normalisation exhaustive de TOUTES les variations de cl√©s
   */
  private normalizeEnterpriseKeys(enterprise: any): any {
    return {
      // Nom entreprise
      nom_entreprise: this.getFirstValidValue(enterprise, [
        'nom_entreprise', 'nom', 'name', 'company_name', 'companyName', 
        'entreprise', 'company', 'societe', 'soci√©t√©'
      ]),
      
      // Site web
      site_web: this.getFirstValidValue(enterprise, [
        'site_web', 'siteWeb', 'site', 'website', 'url', 'web', 'site_internet'
      ]),
      
      // Description
      description_activite: this.getFirstValidValue(enterprise, [
        'description_activite', 'descriptionActivite', 'description', 
        'activity', 'activite', 'activit√©', 'desc', 'about'
      ]),
      
      // Produits
      produits_entreprise: this.getFirstValidValue(enterprise, [
        'produits_entreprise', 'produitsEntreprise', 'produits', 
        'products', 'product', 'production'
      ]),
      
      // Potentiel CGR
      potentiel_cgr: this.getFirstValidValue(enterprise, [
        'potentiel_cgr', 'potentielCgr', 'potentiel', 
        'cgr_potential', 'cgrPotential', 'potential'
      ]),
      
      // Fournisseur
      fournisseur_actuel_estimation: this.getFirstValidValue(enterprise, [
        'fournisseur_actuel_estimation', 'fournisseurActuelEstimation', 
        'fournisseur_actuel', 'fournisseur', 'current_supplier', 
        'currentSupplier', 'supplier'
      ]),
      
      // Sources
      sources: this.getFirstValidValue(enterprise, [
        'sources', 'source', 'references', 'refs', 'liens', 'links'
      ]),
      
      // Taille
      taille_entreprise: this.getFirstValidValue(enterprise, [
        'taille_entreprise', 'tailleEntreprise', 'taille', 
        'size', 'company_size', 'companySize'
      ]),
      
      // Volume
      volume_pieces_estime: this.getFirstValidValue(enterprise, [
        'volume_pieces_estime', 'volumePiecesEstime', 'volume_pieces',
        'volume', 'estimated_volume', 'estimatedVolume'
      ]),
      
      // Zone
      zone_geographique: this.getFirstValidValue(enterprise, [
        'zone_geographique', 'zoneGeographique', 'zone', 
        'location', 'localisation', 'lieu', 'place', 'region', 'r√©gion'
      ])
    };
  }

  /**
   * R√©cup√®re la premi√®re valeur valide parmi une liste de cl√©s
   */
  private getFirstValidValue(obj: any, keys: string[]): any {
    for (const key of keys) {
      const value = obj[key];
      if (value !== undefined && value !== null && value !== '') {
        return value;
      }
    }
    return '';
  }

  /**
   * Garantit qu'une valeur est un tableau
   */
  private ensureArray(value: any): string[] {
    if (Array.isArray(value)) {
      return value
        .map(v => String(v || '').trim())
        .filter(v => v !== '' && v !== 'Non sp√©cifi√©' && v !== 'null' && v !== 'undefined');
    }
    if (typeof value === 'string' && value.trim() !== '') {
      return [value.trim()];
    }
    return [];
  }

  /**
   * Garantit une longueur minimale de texte
   */
  private ensureMinimumLength(text: any, minLength: number, fallback: string): string {
    const str = String(text || '').trim();
    if (str.length >= minLength && 
        str !== 'Non sp√©cifi√©' && 
        str !== '√Ä d√©finir' &&
        str !== 'null' &&
        str !== 'undefined') {
      return str;
    }
    return fallback;
  }

  /**
   * Nettoyage de l'URL du site web
   */
  private cleanWebsiteUrl(url: any): string {
    if (!url) return '';
    let cleanUrl = String(url).trim();
    
    // Ignorer les valeurs par d√©faut
    if (cleanUrl === 'Non sp√©cifi√©' || cleanUrl === '√Ä d√©finir') {
      return '';
    }
    
    // Ajouter le protocole si manquant
    if (cleanUrl && !cleanUrl.startsWith('http://') && !cleanUrl.startsWith('https://')) {
      cleanUrl = 'https://' + cleanUrl;
    }
    
    return cleanUrl;
  }

  /**
   * üéØ Nettoyage du potentiel CGR avec garantie d'argumentaire
   */
  private cleanPotentielCGR(
    potentiel: any, 
    nomEntreprise: string,
    searchData: EnterpriseSearchData
  ): Enterprise['potentiel_cgr'] {
    if (!potentiel || typeof potentiel !== 'object') {
      potentiel = {};
    }
    
    // Normaliser les cl√©s du potentiel CGR
    const normalized = {
      produits_cibles: this.getFirstValidValue(potentiel, [
        'produits_cibles_chez_le_prospect', 'produitsCiblesChezLeProspect',
        'produits_cibles', 'produitsCibles', 'target_products', 
        'targetProducts', 'cibles'
      ]),
      produits_cgr: this.getFirstValidValue(potentiel, [
        'produits_cgr_a_proposer', 'produitsCgrAProposer',
        'produits_cgr', 'produitsCgr', 'cgr_products', 
        'cgrProducts', 'solutions'
      ]),
      argumentaire: this.getFirstValidValue(potentiel, [
        'argumentaire_approche', 'argumentaireApproche',
        'argumentaire', 'approach', 'approche', 'pitch'
      ])
    };
    
    // Produits CGR par d√©faut
    const defaultCGRProducts = searchData.produitsCGR?.length > 0 
      ? searchData.produitsCGR 
      : ['Ressorts fil', 'Pi√®ces d√©coup√©es', 'Assemblages'];
    
    // üéØ GARANTIR UN ARGUMENTAIRE MINIMUM
    let argumentaire = String(normalized.argumentaire || '').trim();
    
    if (!argumentaire || 
        argumentaire.length < 100 || 
        argumentaire === '√Ä d√©finir' ||
        argumentaire === 'Non sp√©cifi√©') {
      
      const secteur = searchData.secteursActivite?.[0] || 
                      searchData.secteurActiviteLibre || 
                      'industriel';
      
      const zone = searchData.zoneGeographique?.[0] || 
                   searchData.zoneGeographiqueLibre || 
                   'France';
      
      argumentaire = `CGR International peut accompagner ${nomEntreprise} gr√¢ce √† son expertise dans le secteur ${secteur}. ` +
        `Notre gamme de produits (${defaultCGRProducts.join(', ')}) r√©pond aux besoins de pr√©cision et de fiabilit√©. ` +
        `Notre proximit√© g√©ographique en ${zone} garantit une r√©activit√© optimale avec des d√©lais courts. ` +
        `Nos certifications ISO 9001 et IATF 16949 assurent la qualit√© de nos processus. ` +
        `Notre R&D d√©di√©e permet de co-d√©velopper des solutions sur-mesure adapt√©es √† vos contraintes sp√©cifiques. ` +
        `L'analyse approfondie des besoins sp√©cifiques de ${nomEntreprise} permettrait d'affiner cette proposition de valeur.`;
      
      console.log(`‚ÑπÔ∏è Argumentaire g√©n√©r√© pour ${nomEntreprise} (${argumentaire.length} caract√®res)`);
    }
    
    return {
      produits_cibles_chez_le_prospect: this.ensureArray(normalized.produits_cibles),
      produits_cgr_a_proposer: this.ensureArray(normalized.produits_cgr).length > 0
        ? this.ensureArray(normalized.produits_cgr)
        : defaultCGRProducts,
      argumentaire_approche: argumentaire
    };
  }

  /**
   * Prompt syst√®me pour Perplexity - VERSION OPTIMIS√âE
   */
  private getSystemPrompt(): string {
    return `Tu es un expert en intelligence √©conomique sp√©cialis√© dans l'identification de prospects FABRICANTS pour CGR International.

üéØ MISSION: Identifier des FABRICANTS (pas des distributeurs) ayant des besoins potentiels en composants CGR.

üìã FORMAT JSON OBLIGATOIRE:

{
  "enterprises": [
    {
      "nom_entreprise": "Nom officiel complet",
      "site_web": "https://www.example.com",
      "description_activite": "Description d√©taill√©e des activit√©s de fabrication",
      "produits_entreprise": ["Produit 1", "Produit 2", "Produit 3"],
      "potentiel_cgr": {
        "produits_cibles_chez_le_prospect": ["Composant 1", "Composant 2"],
        "produits_cgr_a_proposer": ["Ressort de compression", "Pi√®ce d√©coup√©e"],
        "argumentaire_approche": "MINIMUM 200 MOTS: Analyse d√©taill√©e du potentiel CGR pour ce prospect. Pourquoi CGR est pertinent ? Quels composants CGR peut fournir ? Quels avantages concrets (qualit√©, innovation, proximit√©, certifications) ? Quelle valeur ajout√©e sp√©cifique pour ce client ?"
      },
      "fournisseur_actuel_estimation": "Nom du fournisseur probable ou '√Ä identifier'",
      "sources": ["https://source1.com", "https://source2.com"],
      "taille_entreprise": "PME (< 250 salari√©s) | ETI (250-5000) | Grande entreprise (> 5000)",
      "volume_pieces_estime": "Tr√®s √©lev√© (>100k/an) | √âlev√© (10-100k) | Moyen (1-10k) | Faible (<1k)",
      "zone_geographique": "Ville, R√©gion, Pays"
    }
  ]
}

‚ö†Ô∏è R√àGLES CRITIQUES:

1. **Champ OBLIGATOIRE**: argumentaire_approche doit faire MINIMUM 200 mots
2. **Qualit√©**: Remplir tous les champs avec des donn√©es r√©elles
3. **Pas de texte avant/apr√®s le JSON** - Commence par { et termine par }
4. **Guillemets doubles uniquement**
5. **Pas de virgule finale** dans les tableaux/objets

üè≠ PRODUITS CGR DISPONIBLES:
- Ressorts fil (compression, traction, torsion)
- Ressorts plats
- Pi√®ces d√©coup√©es (d√©coupe laser, poin√ßonnage)
- Formage de tubes
- Assemblages automatis√©s
- Solutions m√©catroniques
- Injection plastique

üö´ EXCLUSIONS:
- Distributeurs, revendeurs, n√©gociants
- Installateurs sans usine
- Fabricants de ressorts (concurrents directs CGR)

‚úÖ EXEMPLE d'argumentaire de qualit√© (200+ mots):

"CGR International repr√©sente un partenaire strat√©gique pour [Nom Entreprise] dans l'optimisation de ses composants m√©caniques. Notre expertise de plus de 50 ans dans la fabrication de ressorts fil nous permet de proposer des solutions parfaitement adapt√©es aux contraintes de [secteur sp√©cifique]. Pour leurs [produit identifi√©], nos ressorts de compression offrent une durabilit√© exceptionnelle avec plus de 500 000 cycles garantis gr√¢ce √† notre traitement thermique propri√©taire et notre s√©lection rigoureuse des mati√®res premi√®res.

Notre proximit√© g√©ographique constitue un avantage majeur : avec notre usine situ√©e en [r√©gion], nous garantissons des d√©lais de livraison de 48h pour les urgences et permettons une collaboration technique rapproch√©e. Cette r√©activit√© est cruciale pour accompagner les √©volutions de production et les besoins de derni√®re minute.

Notre d√©partement R&D, compos√© de 15 ing√©nieurs sp√©cialis√©s, peut co-d√©velopper des solutions sur-mesure pour [application sp√©cifique]. Nous avons d√©j√† accompagn√© des acteurs majeurs de [secteur] dans des projets similaires. Nos certifications ISO 9001, IATF 16949 et notre qualification a√©ronautique EN 9100 garantissent le respect des standards les plus exigeants.

Pour les volumes √©lev√©s anticip√©s (estimation >100 000 pi√®ces/an), notre capacit√© d'assemblage automatis√© permet de r√©duire les co√ªts unitaires de 15-20% tout en assurant une qualit√© constante. Notre syst√®me de tra√ßabilit√© complet r√©pond aux exigences de [secteur] en mati√®re de qualit√© et de compliance."

RETOURNE UNIQUEMENT LE JSON - RIEN D'AUTRE.`;
  }

  /**
   * Construction du prompt utilisateur - VERSION OPTIMIS√âE
   */
  private buildEnterpriseSearchPrompt(data: EnterpriseSearchData): string {
    const staticClients = ['Forvia', 'Valeo', 'Schneider Electric', 'Dassault Aviation', 'Thales', 'Safran'];
    
    let additionalClients: string[] = [];
    if (data.clientsExclure && data.clientsExclure.trim() !== '') {
      additionalClients = data.clientsExclure
        .split('\n')
        .map(client => client.trim())
        .filter(client => client !== '' && !staticClients.includes(client));
    }
    
    const excludeClients = [...staticClients, ...additionalClients];

    const allSectors = [
      ...(data.secteursActivite || []),
      ...(data.secteurActiviteLibre ? [data.secteurActiviteLibre.trim()] : [])
    ].filter(s => s && s.trim() !== '');
    
    const secteurPrincipal = allSectors.length > 0 ? allSectors[0] : 'Industriel';
    
    const allZones = [
      ...(data.zoneGeographique || []),
      ...(data.zoneGeographiqueLibre ? [data.zoneGeographiqueLibre.trim()] : [])
    ].filter(z => z && z.trim() !== '');
    
    const zoneGeo = allZones.length > 0 ? allZones.join(', ') : 'France et Europe';
    
    const produitsCGRSpecifiques = data.produitsCGR && data.produitsCGR.length > 0 
      ? data.produitsCGR 
      : ['Ressorts fil', 'Pi√®ces d√©coup√©es', 'Formage tubes', 'Assemblages', 'M√©catronique'];

    return `üéØ RECHERCHE APPROFONDIE: ${data.nombreResultats} entreprises FABRICANTES dans "${secteurPrincipal}"

üìç CRIT√àRES:
- Secteur: ${secteurPrincipal}
- Zone: ${zoneGeo}
- Taille: ${data.tailleEntreprise || 'Toutes tailles'}
- Produits CGR: ${produitsCGRSpecifiques.join(', ')}
- Clients √† EXCLURE: ${excludeClients.join(', ')}

‚ö†Ô∏è INSTRUCTIONS OBLIGATOIRES:

1. **Identifier ${data.nombreResultats} FABRICANTS** (entreprises avec usines)
   - PAS de distributeurs, revendeurs, n√©gociants
   - PAS d'installateurs sans production
   - PAS de concurrents CGR (fabricants de ressorts/pi√®ces d√©coup√©es)

2. **Pour CHAQUE entreprise:**
   - Nom officiel + site web v√©rifi√©
   - Description activit√©: 80+ mots (proc√©d√©s, technologies)
   - 2+ produits finaux fabriqu√©s
   - Composants m√©caniques identifi√©s
   - Solutions CGR pertinentes
   - **ARGUMENTAIRE: MINIMUM 200 MOTS** d√©taillant:
     * Pourquoi CGR est pertinent
     * Quels composants CGR peut fournir
     * Quels avantages concrets (qualit√©, proximit√©, certifications)
     * Quelle valeur ajout√©e sp√©cifique
   - Estimation fournisseur actuel
   - Taille (choisir: PME/ETI/Grande entreprise)
   - Volume estim√© (choisir: Tr√®s √©lev√©/√âlev√©/Moyen/Faible)
   - Localisation pr√©cise
   - 2+ sources URL

3. **VALIDATION:**
   - L'argumentaire fait-il vraiment 200+ mots ?
   - Tous les champs sont-ils remplis ?
   - Les tailles et volumes ont-ils une valeur choisie ?

4. **FORMAT:**
   - UNIQUEMENT le JSON
   - Commence par { et termine par }
   - Pas de markdown, pas de commentaires
   - Guillemets doubles uniquement

üöÄ ACTION: G√©n√®re le JSON complet avec ${data.nombreResultats} entreprises de qualit√©.`;
  }
}